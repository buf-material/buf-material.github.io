<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails4 | My Octopress Blog]]></title>
  <link href="http://yoursite.com/blog/categories/rails4/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2014-12-14T17:12:57+09:00</updated>
  <id>http://yoursite.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bootstrap3-datetimepicker-rails で日時を範囲指定]]></title>
    <link href="http://yoursite.com/blog/2014/10/13/datetime-as-start-end-set-on-bootstrap3-datetimepicker/"/>
    <updated>2014-10-13T08:34:54+09:00</updated>
    <id>http://yoursite.com/blog/2014/10/13/datetime-as-start-end-set-on-bootstrap3-datetimepicker</id>
    <content type="html"><![CDATA[<p>Rails4で2つの日時情報を<code>開始日時</code>と<code>終了日時</code>という範囲指定をおこなうように実装した時の備忘録です。</p>

<h2 class="text-warning">bootstrap-datetimepicker-railsのインストール</h2>


<p>日時を指定するためのカレンダーをbootstrap3で実装しようと思い、調べたら<a href="https://github.com/TrevorS/bootstrap3-datetimepicker-rails" target="_blank">TrevorS/bootstrap3-datetimepicker-rails</a>というgemライブラリが存在しました。</p>

<h3 class="text-success">Gemライブラリのインストール</h3>


<p><a href="https://github.com/TrevorS/bootstrap3-datetimepicker-rails" target="_blank">TrevorS/bootstrap3-datetimepicker-rails</a>をインストールします。</p>

<pre><code class="ruby Gemfile"># jQuery plugin for drop-in fix binded events problem caused by Turbolinks
gem 'jquery-turbolinks'

# See https://github.com/sstephenson/execjs#readme for more supported runtimes
gem 'therubyracer',  platforms: :ruby

# Install Twitter Bootstrap3
# https://github.com/twbs/bootstrap-sass
gem 'bootstrap-sass', '~&gt; 3.2.0'

# -webkit-border-radius みたいなブラウザベンダープレフィックスをよしなに管理してくれる
# Parse CSS and add vendor prefixes to rules by Can I Use 
# https://twitter.com/autoprefixer
gem 'autoprefixer-rails'

# Istall of bootstrap3-datetimepicker-rails
# See https://github.com/TrevorS/bootstrap3-datetimepicker-rails
gem 'momentjs-rails', '&gt;= 2.8.1'
gem 'bootstrap3-datetimepicker-rails', '~&gt; 3.1.3'
</code></pre>

<p>ライブラリをインストールします。</p>

<pre><code class="sh">bundle install
</code></pre>

<h3 class="text-success">javascriptライブラリのinclude</h3>


<p><code>app/assets/javascripts/application.js</code>に以下を追記します。</p>

<pre><code class="javascript app/assets/javascripts/application.js">//= require jquery
//= require jquery.turbolinks
//= require jquery_ujs
//= require bootstrap-sprockets
//= require moment
//= require bootstrap-datetimepicker
//= require turbolinks
//= require_tree .
</code></pre>

<h3 class="text-success">スタイルシートの読み込み</h3>


<p><code>app/assets/stylesheets/application.css.scss</code>に以下を追記します。</p>

<pre><code class="scss app/assets/stylesheets/application.css.scss">@import "bootstrap-sprockets";
@import "bootstrap";
@import 'bootstrap-datetimepicker';
</code></pre>

<h2 class="text-warning">2つの期間を指定するdatetimepickerを実装</h2>


<h3 class="text-success">Entryリソースの生成</h3>


<p>今回は2つの期間を指定したエントリを保存するためのEntryリソースをscaffoldで生成します。
開始日時を<code>datetime型</code>の<code>start_at</code>アトリビュート、終了日時を<code>datetime型</code>の<code>end_at</code>アトリビュートとして定義しています。</p>

<pre><code class="sh">bundle exec rails g scaffold Entry name:string start_at:datetime end_at:datetime description:string
bundle exec rake db:migrate

cat &lt;&lt; EOT &gt; config/routes.rb
Rails.application.routes.draw do
  root 'entries#index'
  resources :entries
end
EOT
</code></pre>

<h3 class="text-success">javascriptの記述</h3>


<p><a href="http://eonasdan.github.io/bootstrap-datetimepicker/#example9" target="_blank"><a href="http://eonasdan.github.io/bootstrap-datetimepicker/#example9">http://eonasdan.github.io/bootstrap-datetimepicker/#example9</a></a>を参考にしました。</p>

<p>&#8220;`javascript app/views/entries/_form.html.erb</p>

<script type="text/javascript">
  $(function(){

    // bootstrap-datetimepicker-rails configurations
    //   - references
    //     1. http://eonasdan.github.io/bootstrap-datetimepicker/#options
    //     2. http://shibuso.github.io/datetimepicker_test/datetimepicker_02.html


    // .datepicker_start へのdatetimepicker設定
    $('.datepicker_start').datetimepicker({ 

      // カレンダー表示言語
      // bootstrap-datetimepicker.ja.js が必要
      //language: 'ja',

      // 月日ピッカーと時間ピッカーを隣に表示する
      //sideBySide: true,

      // 日時フォーマット
      format: 'YYYY-MM-DD HH:mm',

      // 分の選択可能間隔
      minuteStepping: 5,

    });

    // .datepicker_end へのdatetimepicker設定
    $('.datepicker_end').datetimepicker({ 

      // カレンダー表示言語
      // bootstrap-datetimepicker.ja.js が必要
      //language: 'ja',

      // 月日ピッカーと時間ピッカーを隣に表示する
      //sideBySide: true,

      // 日時フォーマット
      format: 'YYYY-MM-DD HH:mm',

      // 分の選択可能間隔
      minuteStepping: 5,

    });

    // set a minimum date of start_at
    $('.datepicker_start').on("dp.change",function (e) {
      $('.datepicker_end').data("DateTimePicker").setMinDate(e.date);
    });

    // set a maximum date of end_at
    $('.datepicker_end').on("dp.change",function (e) {
      $('.datepicker_start').data("DateTimePicker").setMaxDate(e.date);
    });

  });
</script>


<p>&#8220;`</p>

<h3 class="text-success">viewの記述(ERB)</h3>


<pre><code class="erb app/views/entries/_form.html.erb">&lt;%= form_for ( @entry ) do |f| %&gt;
  &lt;% if @entry.errors.any? %&gt;
    &lt;div id="error_explanation"&gt;
      &lt;h2&gt;&lt;%= pluralize(@entry.errors.count, "error") %&gt; prohibited this entry from being saved:&lt;/h2&gt;

      &lt;ul&gt;
      &lt;% @entry.errors.full_messages.each do |message| %&gt;
        &lt;li&gt;&lt;%= message %&gt;&lt;/li&gt;
      &lt;% end %&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;% end %&gt;

  &lt;div class="col-sm-8 col-md-8"&gt;
    &lt;div class="form-group"&gt;
      &lt;%= f.label :name, '名前' %&gt;&lt;br&gt;
      &lt;%= f.text_field :name, :class =&gt; 'form-control', :placeholder =&gt; "エントリーの名前を入力してください..." %&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class="col-sm-8 col-md-8"&gt;
    &lt;div class="form-group"&gt;
      &lt;%= f.label :start_at, '開始日時' %&gt;&lt;br&gt;
      &lt;div class='input-group datepicker_start'&gt;
        &lt;%= f.text_field :start_at, :class =&gt; 'form-control', :readonly =&gt; 'true', :placeholder =&gt; "開始日時を選択してください..." %&gt;
        &lt;span class="input-group-addon"&gt;
          &lt;span class="glyphicon glyphicon-calendar"&gt;&lt;/span&gt;
        &lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class="col-sm-8 col-md-8"&gt;
    &lt;div class="form-group"&gt;
      &lt;%= f.label :end_at, '終了日時' %&gt;&lt;br&gt;
      &lt;div class='input-group datepicker_end'&gt;
        &lt;%= f.text_field :end_at, :class =&gt; 'form-control', :readonly =&gt; 'true', :placeholder =&gt; "終了日時を選択してください..." %&gt;
        &lt;span class="input-group-addon"&gt;
          &lt;span class="glyphicon glyphicon-calendar"&gt;&lt;/span&gt;
        &lt;/span&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class="col-sm-8 col-md-8"&gt;
    &lt;div class="form-group"&gt;
      &lt;%= f.label :description, '説明' %&gt;&lt;br&gt;
      &lt;%= f.text_field :description, :class =&gt; 'form-control', :placeholder =&gt; "エントリーの説明を入力してください..." %&gt;
    &lt;/div&gt;
  &lt;/div&gt;

  &lt;div class="col-sm-8 col-md-8"&gt;
    &lt;div class="actions"&gt;
      &lt;%= f.submit 'エントリーを作成', :class =&gt; 'btn btn-primary' %&gt;
    &lt;/div&gt;
  &lt;/div&gt;

&lt;% end %&gt;
</code></pre>

<h2 class="text-warning">参考にさせて頂いた情報</h2>


<p><a href="http://qiita.com/kidachi_/items/9f76a27890d96b9f5838" target="_balnk"><a href="http://qiita.com/kidachi_/items/9f76a27890d96b9f5838">http://qiita.com/kidachi_/items/9f76a27890d96b9f5838</a></a><br>
<a href="http://www.workabroad.jp/posts/974" target="_blank"><a href="http://www.workabroad.jp/posts/974">http://www.workabroad.jp/posts/974</a></a><br>
<a href="http://eonasdan.github.io/bootstrap-datetimepicker/#example9" target="_blank"><a href="http://eonasdan.github.io/bootstrap-datetimepicker/#example9">http://eonasdan.github.io/bootstrap-datetimepicker/#example9</a></a><br></p>

<h2 class="text-warning">エントリー期間内に複数のイベントを定義できるように実装する</h2>


<p>定義したエントリーの中には複数のイベントを持つことができるようにEventリソースを生成します。イベントは<code>食事</code>などのカテゴリーを持つようにしたいのでCategoryリソースを先に生成します。</p>

<h3 class="text-success">イベントに付けるカテゴリーのリストを生成する</h3>


<pre><code class="sh">bundle exec rails g scaffold category name:string icon_name:string
</code></pre>

<h3 class="text-success">イベント用のEventリソースを生成する</h3>


<pre><code class="sh">bundle exec rails g scaffold event entry:references name:string start_at:datetime end_at:datetime description:string category:references
</code></pre>

<pre><code class="sh">bundle exec rake db:migrate
</code></pre>

<h3 class="text-success">モデルのアソシエーションを記述する</h3>


<pre><code class="ruby app/models/entry.rb">class Entry &lt; ActiveRecord::Base
  has_many :events
end
</code></pre>

<pre><code class="ruby app/models/event.rb">class Event &lt; ActiveRecord::Base
  belongs_to :entry
  belongs_to :category
end
</code></pre>

<pre><code class="ruby app/models/category.rb">class Category &lt; ActiveRecord::Base
  has_many :events
end
</code></pre>

<h3 class="text-success">エントリーの編集ページにイベント作成ページへのリンクを設置</h3>


<p>イベントは特定のエントリーに属するのでエントリーの編集画面から追加できるようにします。</p>

<pre><code class="erb">&lt;%= link_to "#{@entry.name} にイベントを追加", "/events/#{@entry.id}/new" %&gt;
</code></pre>

<p>リンクURLがRESTFulなルーティングリソースではないので<code>config/routes.rb</code>にルーティングを追記します。</p>

<pre><code class="ruby config/routes.rb">resources :events
get 'events/:entry_id/new' =&gt; 'events#new'
</code></pre>

<h3 class="text-success">イベント作成ページの`Entry_id`のテキストフィールドにエントリーIDを表示</h3>


<pre><code class="ruby app/controllers/events_controller.rb">  # GET /events/:entry_id/new
  def new
    entry_id = params.require(:entry_id)
    @event = Event.new( :entry_id =&gt; entry_id )
  end
</code></pre>

<p>&#8220;`erb app/views/events/_form.html.erb</p>

<script type="text/javascript">

  $(function(){

    // bootstrap-datetimepicker-rails configurations
    //   - references
    //     1. http://eonasdan.github.io/bootstrap-datetimepicker/#options
    //     2. http://shibuso.github.io/datetimepicker_test/datetimepicker_02.html

    var start_at = new Date( <%= DateTime.parse( @entry.start_at.to_s ).utc.to_i*1000 %> );
    var end_at = new Date( <%= DateTime.parse( @entry.end_at.to_s ).utc.to_i*1000 %> );

    // define datepicker of start_at
    $('.datepicker_start').datetimepicker({

      // カレンダー表示言語
      // bootstrap-datetimepicker.ja.js が必要
      //language: 'ja',

      // 月日ピッカーと時間ピッカーを隣に表示する
      //sideBySide: true,

      // 日時フォーマット
      format: 'YYYY-MM-DD HH:mm',

      // 分の選択可能間隔
      minuteStepping: 5,

      // 選択可能な最小日
      minDate: start_at,

      // 選択可能な最大日
      maxDate: end_at,

    });

    // define datepicker of end_at
    $('.datepicker_end').datetimepicker({

      // カレンダー表示言語
      // bootstrap-datetimepicker.ja.js が必要
      //language: 'ja',

      // 月日ピッカーと時間ピッカーを隣に表示する
      //sideBySide: true,

      // 日時フォーマット
      format: 'YYYY-MM-DD HH:mm',

      // 分の選択可能間隔
      minuteStepping: 5,

      // 選択可能な最小日
      minDate: start_at,

      // 選択可能な最大日
      maxDate: end_at,

    });

  });

</script>


<p>iv class=&ldquo;field&rdquo;>
 |f| %>
  &lt;% if @event.errors.any? %>
    <div id="error_explanation">
      <h2>&lt;%= pluralize(@event.errors.count, &ldquo;error&rdquo;) %> prohibited this event from being saved:</h2></p>

<pre><code>  &lt;ul&gt;
  &lt;% @event.errors.full_messages.each do |message| %&gt;
    &lt;li&gt;&lt;%= message %&gt;&lt;/li&gt;
  &lt;% end %&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</code></pre>

<p>  &lt;% end %></p>

<p>  <div class="field">
    &lt;%= f.label :entry_id %><br>
    &lt;%= f.text_field :entry_id, :readonly => true %>
  </div>
  <div class="field">
    &lt;%= f.label :name %><br>
    &lt;%= f.text_field :name %>
  </div></p>

<p>  <!-- 開始日時カレンダー -->
  <div class="col-sm-8 col-md-8">
    <div class="form-group">
      &lt;%= f.label :start_at, &lsquo;開始日時&rsquo; %><br>
      <div class='input-group datepicker_start'>
        &lt;%= f.text_field :start_at,
                         :value => @entry.start_at,
                         :class => &lsquo;form-control&rsquo;,
                         :readonly => &lsquo;true&rsquo;,
                         :placeholder => &ldquo;開始日時を選択してください&hellip;&rdquo; %></p>

<pre><code>    &lt;!-- glyphicon --&gt;
    &lt;span class="input-group-addon"&gt;
      &lt;span class="glyphicon glyphicon-calendar"&gt;&lt;/span&gt;
    &lt;/span&gt;

  &lt;/div&gt;&lt;!-- /.input-group datepicker_start --&gt;
&lt;/div&gt;&lt;!-- /.form-group --&gt;
</code></pre>

<p>  </div><!-- /.col-sm .col-md --></p>

<p>  <!-- 終了日時カレンダー -->
  <div class="col-sm-8 col-md-8">
    <div class="form-group">
      &lt;%= f.label :end_at, &lsquo;終了日時&rsquo; %><br>
      <div class='input-group datepicker_end'>
        &lt;%= f.text_field :end_at,
                         :value => @entry.end_at,
                         :class => &lsquo;form-control&rsquo;,
                         :readonly => &lsquo;true&rsquo;,
                         :placeholder => &ldquo;終了日時を選択してください&hellip;&rdquo; %>
        <!-- glyphicon -->
        <span class="input-group-addon">
          <span class="glyphicon glyphicon-calendar"></span>
        </span></p>

<pre><code>  &lt;/div&gt;&lt;!-- /.input-group datepicker_start --&gt;
&lt;/div&gt;&lt;!-- /.form-group --&gt;
</code></pre>

<p>  </div><!-- /.col-sm .col-md --></p>

<p>  <div class="field">
    &lt;%= f.label :description %><br>
    &lt;%= f.text_field :description %>
  </div>
  <div class="actions">
    &lt;%= f.submit %>
  </div>
&lt;% end %>
<code>
    &lt;%= f.label :entry_id %&gt;&lt;br&gt;
    &lt;%= f.text_field :entry_id, :readonly =&gt; true %&gt;
  &lt;/div&gt;
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[herokuとGitHubにデプロイする時にパスワードやキー情報を隠したい時の対処方法]]></title>
    <link href="http://yoursite.com/blog/2014/10/07/hidden-key-on-rails-for-heroku/"/>
    <updated>2014-10-07T14:45:31+09:00</updated>
    <id>http://yoursite.com/blog/2014/10/07/hidden-key-on-rails-for-heroku</id>
    <content type="html"><![CDATA[<p>Rails4でアプリケーションを作って、<a href="https://www.heroku.com/home">heroku</a>にデプロイした！</p>

<p>もちろん<a href="https://bitbucket.org/">Bitbucket</a>でも構わないが、せっかく作ったコードなので公開したい！</p>

<p>でも、<code>config/database.yml</code>の<code>password</code>情報や<code>APIのKey</code>情報なんかをベタ書きしていると他の人に見られてしまう！</p>

<p><strong>そんな時は環境変数を使いましょう！！</strong></p>

<h2 class="text-warning">見られたくない情報を環境変数に書き換える</h2>


<p><a href="http://buf-material-gmap-place-sample.herokuapp.com/" target="_blank"><a href="http://buf-material-gmap-place-sample.herokuapp.com/">http://buf-material-gmap-place-sample.herokuapp.com/</a></a>なんかでは、<code>Google place API</code>を利用するために<code>Google API KEY</code>を必要とするコードがあります。その箇所を以下のように書き換えます。</p>

<pre><code class="ruby">    @client = GooglePlaces::Client.new( ENV['GOOGLE_API_KEY'] )
</code></pre>

<p>ミソは<code>ENV['GOOGLE_API_KEY']</code>ですね。こういう感じで環境変数化してしまいます。</p>

<h2 class="text-warning">herokuに環境変数をセットする</h2>


<p><code>heroku config:set</code>コマンドを使用することでheroku上で環境変数をセットすることが出来ます。</p>

<p><code>XXXXXXXXXXXXXXXXXXXXXXXX</code>の箇所に実際のKey情報をセットします。また、<code>--app [heroku上のアプリケーション名]</code>も必要です。</p>

<pre><code class="sh">heroku config:set GOOGLE_API_KEY="XXXXXXXXXXXXXXXXXXXXXXXX" --app buf-material-gmap-place-sample
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rail4でGoogle Place APIを利用した位置情報検索サービスの作成]]></title>
    <link href="http://yoursite.com/blog/2014/10/02/use-google-place-on-rails4/"/>
    <updated>2014-10-02T23:54:24+09:00</updated>
    <id>http://yoursite.com/blog/2014/10/02/use-google-place-on-rails4</id>
    <content type="html"><![CDATA[<p>キーワードで位置情報を検索して検索結果の任意の情報をDBへ保存、そして、DBへ保存した位置情報をGoogle Mapsで表示するアプリケーションを作ってみます。</p>

<p>キーワードから位置情報を検索するのに、<a href="https://developers.google.com/places/documentation/?hl=ja" target="_blank">Google Places API</a>のRuby用のラッパーライブラリである<a href="https://github.com/marceldegraaf/google_places" target="_blank">marceldegraaf/google_places</a>をRails4アプリケーションにインストールします。</p>

<p>DBへ保存した位置情報をGoogle Mapsで表示させるのに、<a href="https://github.com/apneadiving/Google-Maps-for-Rails" target="_blank">gmaps4rails</a>をRails4アプリケーションにインストールします。</p>

<p>また、作成したアプリケーションは<a href="https://www.heroku.com/">heroku</a>にpushしますのでRailsのデータベースドライバとしてPostgreSQLを選択します。</p>

<h2 class="text-warning">PostgreSQLの準備</h2>


<h3 class="text-success">PostgreSQLインストール</h3>


<p><a href=http://buf-material.github.io/blog/2014/10/02/install-postgresql-to-centos6-for-rails4/ target="_blank">CentOS6でPostgreSQLインストール</a></p>

<h3 class="text-success">データベースユーザ作成</h3>


<p>PostgreSQLに<code>postgres</code>ユーザで接続します。</p>

<pre><code class="sh">psql --username=postgres
</code></pre>

<p><code>create user</code>SQLを実行して、データベースユーザとして<code>google_place_sample</code>をDB作成権限を付与して作成します。</p>

<pre><code class="sql">create user google_place_sample with createdb password 'google_place_sample';
</code></pre>

<h2 class="text-warning">Railsプロジェクト作成</h2>


<h3 class="text-success">Railsプロジェクト作成</h3>


<p>新しいRailsプロジェクトを作成します。</p>

<pre><code>rails new google_place_sample --database=postgresql
cd google_place_sample
bin/spring stop
</code></pre>

<h3 class="text-success">therubyracer</h3>


<p><code>Gemfile</code>のJavascriptエンジンである<code>therubyracer</code>の設定行をアンコメントします。</p>

<pre><code class="ruby Gemfile"># See https://github.com/sstephenson/execjs#readme for more supported runtimes
gem 'therubyracer',  platforms: :ruby
</code></pre>

<p><code>therubyracer</code>ライブラリをインストールします。</p>

<pre><code class="sh">bundle install
</code></pre>

<h3 class="text-success">PostgreSQLデータベース接続設定</h3>


<p>PostgreSQLデータベース接続情報に接続データベースユーザの情報を追記します。</p>

<pre><code class="yaml config/database.yml">default: &amp;default
  adapter: postgresql
  encoding: unicode
  pool: 5

development:
  &lt;&lt;: *default
  database: google_place_sample_development
  user: google_place_sample
  password: google_place_sample

test:
  &lt;&lt;: *default
  database: google_place_sample_test
  user: google_place_sample
  password: google_place_sample

production:
  &lt;&lt;: *default
  database: google_place_sample_production
  username: google_place_sample
  password: &lt;%= ENV['GOOGLE_PLACE_SAMPLE_DATABASE_PASSWORD'] %&gt;
</code></pre>

<h2 class="text-success">Bootstrap3インストール</h2>


<h3 class="text-warning">Gemライブラリのインストール</h3>


<p><br>
<code>Gemfile</code>に追記します。</p>

<pre><code class="ruby Gemfile"># Install Twitter Bootstrap3
# https://github.com/twbs/bootstrap-sass
gem 'bootstrap-sass', '~&gt; 3.2.0'

# -webkit-border-radius みたいなブラウザベンダープレフィックスをよしなに管理してくれる
# Parse CSS and add vendor prefixes to rules by Can I Use
# https://twitter.com/autoprefixer
gem 'autoprefixer-rails'
</code></pre>

<p>Gemライブラリをインストールします。</p>

<pre><code class="sh">bundle install
</code></pre>

<h3 class="text-warning">bootstrap-sassを使用する準備</h3>


<p>今回は<code>Sass</code>というプリプロセッサに対応した<code>bootstrap3</code>をインストールしているのですが、<strong>CSSの<code>//= require</code>行はSassでは文法として使用できない</strong>>ので注意が必要です。そして、<strong>Sass拡張子のファイルやその他のスタイルシートであっても、Bootstrapからmixinsや変数を利用できないので<code>//= require</code>>行は利用できない</strong>ということです。</p>

<p><a href="https://github.com/twbs/bootstrap-sass#a-ruby-on-rails">本家GiHubのREADME</a>に従い、<code>app/assets/stylesheets/application.css</code>は削除します。</p>

<pre><code class="sh">rm app/assets/stylesheets/application.css
</code></pre>

<p><code>app/assets/stylesheets/application.css.scss</code>を新規作成します。</p>

<pre><code class="scss app/assets/stylesheets/application.css.scss">@import "bootstrap-sprockets";
@import "bootstrap";
</code></pre>

<p><code>app/assets/javascripts/application.js</code>にBootstrap関連のJavascriptsライブラリをrequireします。</p>

<pre><code class="javascript app/assets/javascripts/application.js">//= require bootstrap-sprockets
</code></pre>

<p><code>app/views/layouts/application.html.erb</code>の<code>head</code>タグに<strong>bootstrap関連のスタイルシートをincludeする設定とメディアクエリーを使用するためのviewport設定</strong>を追記します。</p>

<pre><code class="html app/views/layouts/application.html.erb  headタグ内の記述">  &lt;%= stylesheet_link_tag    "bootstrap", media: "all", "data-turbolinks-track" =&gt; true %&gt;
  &lt;meta content="width=device-width, initial-scale=1" name="viewport"&gt;
</code></pre>

<h3 class="text-warning">ナビゲーションメニュー</h3>


<pre><code class="erb app/views/layouts/application.html.erb">  &lt;div class="navbar navbar-inverse navbar-fixed-top" role="navigation"&gt;
    &lt;div class="container"&gt;
      &lt;div class="navbar-header"&gt;
        &lt;button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse"&gt;
          &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt;
          &lt;span class="icon-bar"&gt;&lt;/span&gt;
          &lt;span class="icon-bar"&gt;&lt;/span&gt;
          &lt;span class="icon-bar"&gt;&lt;/span&gt;
        &lt;/button&gt;
        &lt;a class="navbar-brand" href="http://yoursite.com/"&gt;Project name&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="collapse navbar-collapse"&gt;
        &lt;ul class="nav navbar-nav"&gt;
          &lt;li class="active"&gt;&lt;a href="http://yoursite.com/"&gt;Home&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#about"&gt;About&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#contact"&gt;Contact&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
        &lt;form class="navbar-form navbar-left"&gt;
          &lt;input type="text" class="form-control col-lg-8" placeholder="Search"&gt;
        &lt;/form&gt;
      &lt;/div&gt;&lt;!--/.nav-collapse --&gt;
    &lt;/div&gt;&lt;!-- /.container --&gt;
  &lt;/div&gt;&lt;!-- /.navbar --&gt;
</code></pre>

<h3 class="text-warning">Jumbotron(ジャンボトロン)</h3>


<p><code>app/assets/stylesheets/theme-style.css.scss</code>を作成し、スタイルを追加します。</p>

<pre><code class="scss app/assets/stylesheets/theme-style.css.scss">body {
  padding-top: 70px;
  padding-bottom: 30px;
}

.theme-dropdown .dropdown-menu {
  position: static;
  display: block;
  margin-bottom: 20px;
}

.theme-showcase &gt; p &gt; .btn {
  margin: 5px 0;
}

.theme-showcase .navbar .container {
  width: auto;
}
</code></pre>

<p><code>app/assets/stylesheets/application.css.scss</code>に作成した<code>theme-style.css.scss</code>を読む込むように設定します。</p>

<pre><code class="scss app/assets/stylesheets/application.css.scss">@import "theme-style";
</code></pre>

<p>次にJumbotron(ジャンボトロン)を表示するためのコードを記述します。</p>

<pre><code class="html app/views/layouts/application.html.erb">  &lt;div class="container theme-showcase" role="main"&gt;
    &lt;!-- Main jumbotron --&gt;
    &lt;div class="jumbotron"&gt;
      &lt;h1&gt;Hello, world!&lt;/h1&gt;
      &lt;p class="text-warning"&gt;bootstrap3-sample&lt;/p&gt;
    &lt;/div&gt;&lt;!-- /.jumbotron --&gt;

    &lt;%= yield %&gt;

  &lt;/div&gt;&lt;!-- /.container --&gt;
</code></pre>

<h3 class="text-warning">Railsのフラッシュメッセージ表示</h3>


<p>コントローラ内でModelの保存や削除の成功/失敗などのメッセージを変数に格納された場合にはJumbotron(ジャンボトロン)の上部にします。</p>

<pre><code class="erb app/views/layouts/application.html.erb">  &lt;% if (notice) %&gt;
    &lt;div class="alert alert-info alert-dismissible" role="alert"&gt;
      &lt;button type="button" class="close" data-dismiss="alert"&gt;
        &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
        &lt;span class="sr-only"&gt;閉じる&lt;/span&gt;
      &lt;/button&gt;
      &lt;strong&gt;&lt;%= notice %&gt;&lt;/strong&gt;
    &lt;/div&gt;
  &lt;% end %&gt;
</code></pre>

<h2 class="text-warning">google_placesライブラリでキーワードから位置情報を取得する</h2>


<p><a href="https://github.com/marceldegraaf/google_places" target="_blank"><a href="https://github.com/marceldegraaf/google_places">https://github.com/marceldegraaf/google_places</a></a>をインストールすることで、<code>東京　焼き肉</code>とか<code>沖縄 しまぶた屋</code>などのキーワードで検索して位置情報などを取得することができるようになります。</p>

<h3 class="text-success">Gemライブラリのインストール</h3>


<p><code>Gemfile</code>に追記します。</p>

<pre><code class="ruby Gemfile"># A Ruby wrapper around the Google Places API
# https://github.com/marceldegraaf/google_places
gem 'google_places'
</code></pre>

<p>Gemライブラリをインストールします。</p>

<pre><code class="sh">bundle install
</code></pre>

<h3 class="text-success">コントローラとビューの生成</h3>


<p>今回は<code>scaffold</code>で生成しません。</p>

<p><code>rails g controller</code>コマンドを使用してコントローラとビューを生成します。</p>

<div>
  <table class="table table-striped">
    <thead>
      <tr>
        <th>アクション名</th>
        <th>役割</th>
        <th>ビューの生成</th>
      </tr>
    </thead>

    <tbody>
      <tr>
        <td>index</td>
        <td>検索フォームと登録済み位置情報テーブル</td>
        <td><span class="glyphicon glyphicon-ok"></span></td>
      </tr>
      <tr>
        <td>list</td>
        <td>Google place API検索結果の表示</td>
        <td><span class="glyphicon glyphicon-ok"></span></td>
      </tr>
      <tr>
        <td>show</td>
        <td>当該レコードの位置情報を表示</td>
        <td><span class="glyphicon glyphicon-ok"></span></td>
      </tr>
      <tr>
        <td>create</td>
        <td>当該位置情報をDBへ保存</td>
        <td><span class="glyphicon glyphicon-remove"></span></td>
      </tr>
      <tr>
        <td>destroy</td>
        <td>当該位置情報をDBから削除</td>
        <td><span class="glyphicon glyphicon-remove"></span></td>
      </tr>
    </tbody>
  </table>
</div>


<pre><code class="sh">bundle exec rails g controller place index list show
</code></pre>

<h4 class="text-default">app/controllers/place_controller.rb</h4>


<pre><code class="ruby app/controllers/place_controller.rb">class PlaceController &lt; ApplicationController
  before_action :set_place, only: [:show, :destroy]

  def index
    @places = Place.all
  end

  def show
  end

  def list
    keyword = params[:search]
    @client = GooglePlaces::Client.new( ENV['GOOGLE_API_KEY'] )
    @places = @client.spots_by_query( keyword )
  end

  def create
    @place = Place.new(place_params)

    respond_to do |format|
      if @place.save
        format.html { redirect_to place_index_path, notice: "#{@place.name} の位置情報を保存しました" }
      else
        format.html { render :index, notice: "#{@place.name} の位置情報を保存できませんでした" }
      end
    end
  end

  def destroy
    @place.destroy

    respond_to do |format|
      format.html { redirect_to place_index_path, notice: "#{@place.name} の位置情報を削除しました" }
    end
  end

  private
    # Use callbacks to share common setup or constraints between actions.
    def set_place
      @place = Place.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def place_params
      params.require(:place).permit(:name, :latitude, :longitude, :address)
    end

end
</code></pre>

<h4 class="text-default">app/views/place/index.html.erb</h4>


<p><img src="/images/google_place_sample_01.jpg" alt="" />
<br></p>

<p>&#8220;`erb app/views/place/index.html.erb</p>

<h1>位置情報を検索してみよう</h1>




<div class="col-md-6">
  <%= form_tag place_list_path, :role =>&#8220;form&#8221;, :method => :get do %>
    <div class="form-group">
      <%= text_field_tag :search, params[:search], { :class => &#8220;form-control&#8221;, :required => true, } %>
      <%= button_tag( {:type => &#8220;submit&#8221;, :name => nil, :class => &#8220;btn btn-default&#8221; } ) do %>
        <span class="glyphicon glyphicon-search">キーワード検索</span>
      <% end %>
    </div>
  <% end %>
</div>




<div class="col-md-12">
  <table class="table table-striped">
    <thead>
      <tr>
        <th>Name</th>
        <th>Latitude</th>
        <th>Longitude</th>
        <th>Address</th>
        <th colspan="2"></th>
      </tr>
    </thead>

    <tbody>
      <% @places.each do |place| %>
        <tr>
          <td><%= place.name %></td>
          <td><%= place.latitude %></td>
          <td><%= place.longitude %></td>
          <td><%= place.address %></td>
          <td><%= link_to ( place ), :title => &#8220;show&#8221; do %>
            <span class="glyphicon glyphicon-stats"></span>
          <% end %></td>
          <td><%= link_to( place, method: :delete, data: { confirm: "#{place.name} の位置情報を削除します" }, :title => &#8220;delete&#8221; ) do %>
            <span class="glyphicon glyphicon-trash"></span>
          <% end %></td>
        </tr>
      <% end %>
    </tbody>
  </table>
</div>


<p>&#8220;`</p>

<h4 class="text-default">app/views/place/list.html.erb</h4>


<p><img src="/images/google_place_sample_02.jpg" alt="" />
<br></p>

<p>&#8220;`erb app/views/place/list.html.erb</p>

<h1>希望の場所は見つかったかな?</h1>




<div class="col-md-12">
  <table class="table table-striped">
    <thead>
      <tr>
        <th>Name</th>
        <th>Latitude</th>
        <th>Longitude</th>
        <th>Address</th>
        <th></th>
      </tr>
    </thead>

    <tbody>
      <% @places.each do |place| %>
        <tr>
          <td><%= place.name %></td>
          <td><%= place.lat %></td>
          <td><%= place.lng %></td>
          <td><%= place.formatted_address %></td>
          <td><%= link_to( '登録', place_index_path( :place => { :name      => place.name,
                                                                 :latitude  => place.lat,
                                                                 :longitude => place.lng,
                                                                 :address   => place.formatted_address, } ),:method => &#8216;post&#8217; ) %>
          </td>
        </tr>
      <% end %>
    </tbody>
  </table>

  <button type="button" class="btn pull-right btn-lg btn-default">
    <%= link_to 'Back', place_index_path %>
  </button>

</div>


<p>&#8220;`</p>

<h4 class="text-default">app/views/place/show.html.erb</h4>


<p><img src="/images/google_place_sample_03.jpg" alt="" />
<br></p>

<p>&#8220;`erb app/views/place/show.html.erb</p>

<div class="col-md-12">
  <table class="table table-striped">
    <thead>
      <tr>
        <th>Name</th>
        <th>Latitude</th>
        <th>Longitude</th>
        <th>Address</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><%= @place.name %></td>
        <td><%= @place.latitude %></td>
        <td><%= @place.longitude %></td>
        <td><%= @place.address %></td>
      </tr>
    </tbody>
  </table>

  <button type="button" class="btn pull-right btn-lg btn-default">
    <%= link_to 'Back', place_index_path %>
  </button>

</div>


<p>&#8220;`</p>

<h3 class="text-success">モデルの生成とDBマイグレーション</h3>


<p>位置情報を保存するための<code>place</code>モデルを生成します。</p>

<pre><code class="sh">bundle exec rails g model place name:string address:string latitude:float longitude:float
</code></pre>

<p>DBを作成、マイグレーションを実行します。</p>

<pre><code class="sh">bundle exec rake db:create
bundle exec rake db:migrate
</code></pre>

<h3 class="text-success">ルーティング設定</h3>


<pre><code class="ruby config/routes.rb">Rails.application.routes.draw do
  root 'place#index'

  namespace :place do
    # get 'place/list' request
    get 'list'
  end

  resources :place, :only =&gt; [ :index, :show, :create, :destroy ]
end
</code></pre>

<h2 class="text-warning">ここまでのサンプルアプリケーション</h2>


<p><a href="http://buf-material-gmap-place-sample.herokuapp.com/" target="_blank">google_placeライブラリを使った位置情報検索サンプルアプリケーション</a>
<br></p>

<p><a href="http://buf-material-gmap-place-sample.herokuapp.com/" target="_blank">
  <img src="http://yoursite.com/images/google_place_sample_01.jpg" alt="" />
</a>
<br></p>

<h2 class="text-warning">gmaps4railsライブラリでDBに保存した位置情報からマップを作成する</h2>


<p>ここまでの作業でキーワード検索でリストアップされた施設の位置情報をDBへ保存することが出来ました。</p>

<p>ここで保存している位置情報とは<code>施設名</code>、<code>住所</code>、<code>経度</code>、<code>緯度</code>です。</p>

<p><code>経度</code>と<code>緯度</code>の情報があれば<code>Google Maps</code>上にマークを表示させることが出来ます。</p>

<p><a href=https://github.com/apneadiving/Google-Maps-for-Rails target="_blank">apneadiving/Google-Maps-for-Rails (gmaps4rails)</a>ライブラリを利用することで簡単にDBに保存された<code>経度</code>、<code>緯度</code>を使用してGoogle Mapsを利用できます。</p>

<h3 class="text-success">Gemライブラリのインストール</h3>


<pre><code class="ruby Gemfile"># Enables easy Google map + overlays creation in Ruby apps 
# https://github.com/apneadiving/Google-Maps-for-Rails
# http://apneadiving.github.io/
gem 'gmaps4rails'
</code></pre>

<p>Gemライブラリをインストールします。</p>

<pre><code class="sh">bundle install
</code></pre>

<h3 class="text-success">gmaps4railsライブラリの使用準備</h3>


<p><code>app/views/layouts/application.html.erb</code>の<code>head</code>タグにGoogle Maps関連のライブラリを読み込む設定を追記します。</p>

<pre><code class="html app/views/layouts/application.html.erb  headタグ内の記述">  &lt;script src="//maps.google.com/maps/api/js?v=3.13&amp;amp;sensor=false&amp;amp;libraries=geometry" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src='//google-maps-utility-library-v3.googlecode.com/svn/tags/markerclustererplus/2.0.14/src/markerclusterer_packed.js' type='text/javascript'&gt;&lt;/script&gt;
</code></pre>

<p><code>app/assets/javascripts/application.js</code>にGoogle Maps関連のJavascriptsライブラリをrequireします。</p>

<pre><code class="javascript app/assets/javascripts/application.js">//= require underscore
//= require gmaps/google
</code></pre>

<p><a href="https://github.com/jashkenas/underscore/blob/master/underscore.js" target="_blank">underscore/underscore.js</a>を<code>app/assets/javascripts/underscore.js</code>として作成します。</p>

<h3 class="text-success">Google Mapsをレスポンシブで表示するスタイルシート</h3>


<h4 class="text-default">app/assets/stylesheets/gmap4rails.css.scss</h4>


<pre><code class="scss app/assets/stylesheets/gmap4rails.css.scss">.map_container {
    position: relative;
    width: 100%;
    margin-bottom: 20px;
    padding-bottom: 56.25%; /* Ratio 16:9 ( 100%/16*9 = 56.25% ) */
}

.map_container .map_canvas {
    position: absolute;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    margin: 0;
    padding: 0;
}
</code></pre>

<p><code>app/assets/stylesheets/gmap4rails.css.scss</code>をimportします。</p>

<pre><code class="scss app/assets/stylesheets/application.css.scss">@import "gmap4rails";
</code></pre>

<h3 class="text-success">showアクションでMapを表示する</h3>


<h4 class="text-default">app/controllers/place_controller.rb</h4>


<pre><code class="ruby app/controllers/place_controller.rb のshowアクション">  def show
    @hash = Gmaps4rails.build_markers(@place) do |place,marker|
      marker.lat place.latitude
      marker.lng place.longitude
      marker.json({title: place.name})
    end
  end
</code></pre>

<h4 class="text-default">app/views/place/show.html.erb</h4>


<p>先述した<code>app/views/place/show.html.erb</code>の<code>&lt;/table&gt;</code>タグと<code>&lt;button type="button" class="btn pull-right btn-lg btn-default"&gt;</code>タグの間に以下コードを追記します。</p>

<pre><code class="erb app/views/place/show.html.erb">  &lt;div class="map_container"&gt;
    &lt;div id="map" class="map_canvas"&gt;&lt;/div&gt;
  &lt;/div&gt;


  &lt;script type="text/javascript"&gt;
    handler = Gmaps.build('Google');
    handler.buildMap({ provider: {}, internal: {id: 'map'}}, function(){
      markers = handler.addMarkers(&lt;%=raw @hash.to_json %&gt;);
      handler.bounds.extendWith(markers);
      handler.fitMapToBounds();
      handler.getMap().setZoom(12);
      handler.map.centerOn(marker);
    });
  &lt;/script&gt;
</code></pre>

<p><br>
無事、Google Mapsが表示されました！
<img src="/images/google_place_sample_04.jpg" alt="" />
<br></p>

<h2 class="text-warning">ここまでのサンプルアプリケーション</h2>


<p><a href="http://buf-material-gmap-sample.herokuapp.com/" target="_blank">google_placeとgmaps4railsライブラリを使った位置情報検索サンプルアプリケーション</a>
<br></p>

<p><a href="http://buf-material-gmap-sample.herokuapp.com/" target="_blank">
  <img src="http://yoursite.com/images/google_place_sample_04.jpg" alt="" />
</a>
<br></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS6でPostgreSQLインストール]]></title>
    <link href="http://yoursite.com/blog/2014/10/02/install-postgresql-to-centos6-for-rails4/"/>
    <updated>2014-10-02T14:57:55+09:00</updated>
    <id>http://yoursite.com/blog/2014/10/02/install-postgresql-to-centos6-for-rails4</id>
    <content type="html"><![CDATA[<p><a href="http://buf-material.github.io/blog/2014/09/22/install-bootstrap3-on-rails4/">Rails4でBootstrap3を使う(ついでにherokuへpush)</a>で書いたエントリーから<code>PostgreSQL</code>インストール手順を抜き出しただけのエントリーです。</p>

<h2 class="text-warning">PostgreSQLの準備</h2>


<h3 class="text-success">PostgreSQLインストール</h3>


<p>PostgreSQLの公式yumレポジトリからインストールします。</p>

<pre><code class="sh">yum install -y http://yum.postgresql.org/9.3/redhat/rhel-6-x86_64/pgdg-redhat93-9.3-1.noarch.rpm
yum install -y postgresql93-server postgresql93-contrib postgresql93-devel
</code></pre>

<p>PostgreSQLインストール直後のデータベースディレクトリである<code>/var/lib/pgsql/9.3/data</code>を削除してデータベースを初期化(<code>initdb</code>)し、<code>postgresql-9.3サービス</code>を起動します。ついでに、自動起動も設定します。</p>

<pre><code class="sh">rm -rf /var/lib/pgsql/9.3/data
service postgresql-9.3 initdb
service postgresql-9.3 start
chkconfig postgresql-9.3 on
</code></pre>

<h3 class="text-success">PostgreSQLの認証方式をPeerからTrustへ変更</h3>


<p><a href="https://www.postgresql.jp/document/9.3/html/auth-methods.html">https://www.postgresql.jp/document/9.3/html/auth-methods.html</a></p>

<p>PostgreSQLではデフォルトの認証方式として<code>Peer認証</code>が設定されています。Peer認証とは、カーネルからクライアント上のシステムユーザ名を取得し、PostgreSQLデータベースユーザと同一である場合のみ接続が許可される仕組みです。PostgreSQLでは、デフォルトでは<code>postgres</code>データベースユーザしか存在しないため、UnixユーザもPostgreSQLをパッケージインストールすると作成されている<code>postgres</code>である必要があります(<code>su - postgres</code>しないとダメということ)。</p>

<p><strong><code>Peer認証</code>だとUnixのスーパーユーザである<code>root</code>であってもpostgresデータベースユーザへの接続は許可されません。</strong></p>

<pre><code class="sh"># id
uid=0(root) gid=0(root) 所属グループ=0(root)

# psql --username=postgres
psql: FATAL:  ユーザ "postgres" で対向(peer)認証に失敗しました
</code></pre>

<p>今回は、<strong>サーバに接続できる全Unixユーザから全データベースユーザへの接続が許可される<code>Trust認証</code>に変更します</strong>。</p>

<p><code>Peer認証</code>から<code>Trust認証</code>への変更は<code>/var/lib/pgsql/9.3/data/pg_hba.conf</code>を修正します。</p>

<pre><code class="text /var/lib/pgsql/9.3/data/pg_hba.conf">#local   all             all                                     peer
local   all             all                                     trust
</code></pre>

<p>設定ファイルを修正したので<code>postgresql-9.3</code>サービスを再起動します。</p>

<pre><code class="sh">service postgresql-9.3 restart
</code></pre>

<h3 class="text-success">Railsアプリケーション用のデータベースユーザを作成</h3>


<h4><p class="text-danger">PostgreSQL 9.3ではCREATE USERはCREATE ROLEの別名になりました。 唯一の違いは、CREATE USERという名前でコマンドが呼び出されると、デフォルトでLOGINになり、CREATE ROLEという名前でコマンドが呼び出されると、デフォルトでNOLOGINとなる点です。</p></h4>


<p><a href="https://www.postgresql.jp/document/9.3/html/sql-createuser.html">https://www.postgresql.jp/document/9.3/html/sql-createuser.html</a></p>

<p><br>
PostgreSQLのスーパーユーザである<code>postgres</code>データベースユーザで接続します。</p>

<pre><code class="sh">psql --username=postgres
</code></pre>

<p>今回作成するRailsアプリケーションのプロジェクト名と同一の<code>bootstrap3_sample</code>というデータベースユーザを作成し、データベース作成権限とログイン権限を持つように設定します。</p>

<pre><code class="sql">create user bootstrap3_sample with createdb password 'bootstrap3_sample';
</code></pre>

<p>上記SQLは以下コマンドと同じ効果があります</p>

<pre><code class="sh">createuser --username=postgres --createdb bootstrap3_sample -P
</code></pre>

<p><code>createuser</code>コマンドは<code>postgresql93(末尾の数字はバージョン番号なので適宜目置換を!)</code>RPMパッケージに付属しているPostgreSQLのデータベースユーザ(正確にはロール)を作成するためのコマンドです。SQLでのユーザ作成とは異なり、コマンドでパスワード文字列を指定することは出来ず、<code>-Pオプション</code>によってパスワード文字列を指定するプロンプトが表示されます。</p>

<p>データベースユーザのパスワードがシステムカタログ上に保存される際に暗号化するかどうかは<code>ENCRYPTED/UNENCRYPTED</code>で明示するか、そうでない場合は、<code>/var/lib/pgsql/9.3/data/postgresql.conf</code>の<code>password_encryption</code>設定パラメータに依ります。<code>password_encryption</code>設定パラメータがonの場合に暗号化が有効(default: on)です。</p>

<p>先述した通り、<strong><code>create user</code>SQLはログイン権限オプション(login)を明示しなくても有効となりますし、<code>createuser</code>コマンドでもログイン権限オプション(&ndash;login)がデフォルトで有効なので、ここでは指定していません。この辺りのSQLやコマンドの挙動はPostgreSQLバージョンにも依ると思うので自信の無い場合はログイン権限オプションを明示した方がいいかもしれません。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4でBootstrap3を使う(ついでにherokuへpush)]]></title>
    <link href="http://yoursite.com/blog/2014/09/22/install-bootstrap3-on-rails4/"/>
    <updated>2014-09-22T14:57:55+09:00</updated>
    <id>http://yoursite.com/blog/2014/09/22/install-bootstrap3-on-rails4</id>
    <content type="html"><![CDATA[<p><a href="http://buf-material-bootstrap3-sample.herokuapp.com/" target="_blank">サンプルアプリケーション</a>
<br></p>

<p><a href="http://buf-material-bootstrap3-sample.herokuapp.com/" target="_blank">
  <img src="http://yoursite.com/images/install-bootstrap3-on-rails4_08.jpg">
</a>
<br>
<br></p>

<p>今まではRailsアプリケーションのデザインを独学でCSS書いたりjQueryプラグイン入れたりしてたのですが、今更ながらboootstrapを利用しようと思い始めました。</p>

<p><a href="http://rubyonrails.org/">Ruby on Rails</a>でBootstrap3をインストールする手順を纏めておきます。</p>

<p>今回はRailsアプリケーションのプロジェクト名として<code>bootstrap3_sample</code>という文字を使用することにします。</p>

<p>また、ここで使用しているRailsバージョンは<code>Rails 4.1.6</code>です。</p>

<pre><code class="sh">$ cd /path/to/rails_app
$ bundle exec rails -v
Rails 4.1.6
</code></pre>

<p>作成したアプリケーションは<a href="https://www.heroku.com/">heroku</a>にpushしますのでRailsのデータベースドライバとして<code>PostgreSQL</code>を選択します。それに併せてPostgreSQLのインストールや設定についても自分への備忘録として残しておきます。</p>

<h1>Bootstrapを使用するまで</h1>

<h2 class="text-warning">PostgreSQLの準備</h2>


<h3 class="text-success">PostgreSQLインストール</h3>


<p>PostgreSQLの公式yumレポジトリからインストールします。</p>

<pre><code class="sh">yum install -y http://yum.postgresql.org/9.3/redhat/rhel-6-x86_64/pgdg-redhat93-9.3-1.noarch.rpm
yum install -y postgresql93-server postgresql93-contrib postgresql93-devel
</code></pre>

<p>PostgreSQLインストール直後のデータベースディレクトリである<code>/var/lib/pgsql/9.3/data</code>を削除してデータベースを初期化(<code>initdb</code>)し、<code>postgresql-9.3サービス</code>を起動します。ついでに、自動起動も設定します。</p>

<pre><code class="sh">rm -rf /var/lib/pgsql/9.3/data
service postgresql-9.3 initdb
service postgresql-9.3 start
chkconfig postgresql-9.3 on
</code></pre>

<h3 class="text-success">PostgreSQLの認証方式をPeerからTrustへ変更</h3>


<p><a href="https://www.postgresql.jp/document/9.3/html/auth-methods.html">https://www.postgresql.jp/document/9.3/html/auth-methods.html</a></p>

<p>PostgreSQLではデフォルトの認証方式として<code>Peer認証</code>が設定されています。Peer認証とは、カーネルからクライアント上のシステムユーザ名を取得し、PostgreSQLデータベースユーザと同一である場合のみ接続が許可される仕組みです。PostgreSQLでは、デフォルトでは<code>postgres</code>データベースユーザしか存在しないため、UnixユーザもPostgreSQLをパッケージインストールすると作成されている<code>postgres</code>である必要があります(<code>su - postgres</code>しないとダメということ)。</p>

<p><strong><code>Peer認証</code>だとUnixのスーパーユーザである<code>root</code>であってもpostgresデータベースユーザへの接続は許可されません。</strong></p>

<pre><code class="sh"># id
uid=0(root) gid=0(root) 所属グループ=0(root)

# psql --username=postgres
psql: FATAL:  ユーザ "postgres" で対向(peer)認証に失敗しました
</code></pre>

<p>今回は、<strong>サーバに接続できる全Unixユーザから全データベースユーザへの接続が許可される<code>Trust認証</code>に変更します</strong>。</p>

<p><code>Peer認証</code>から<code>Trust認証</code>への変更は<code>/var/lib/pgsql/9.3/data/pg_hba.conf</code>を修正します。</p>

<pre><code class="text /var/lib/pgsql/9.3/data/pg_hba.conf">#local   all             all                                     peer
local   all             all                                     trust
</code></pre>

<p>設定ファイルを修正したので<code>postgresql-9.3</code>サービスを再起動します。</p>

<pre><code class="sh">service postgresql-9.3 restart
</code></pre>

<h3 class="text-success">Railsアプリケーション用のデータベースユーザを作成</h3>


<h4><p class="text-danger">PostgreSQL 9.3ではCREATE USERはCREATE ROLEの別名になりました。 唯一の違いは、CREATE USERという名前でコマンドが呼び出されると、デフォルトでLOGINになり、CREATE ROLEという名前でコマンドが呼び出されると、デフォルトでNOLOGINとなる点です。</p></h4>


<p><a href="https://www.postgresql.jp/document/9.3/html/sql-createuser.html">https://www.postgresql.jp/document/9.3/html/sql-createuser.html</a></p>

<p><br>
PostgreSQLのスーパーユーザである<code>postgres</code>データベースユーザで接続します。</p>

<pre><code class="sh">psql --username=postgres
</code></pre>

<p>今回作成するRailsアプリケーションのプロジェクト名と同一の<code>bootstrap3_sample</code>というデータベースユーザを作成し、データベース作成権限とログイン権限を持つように設定します。</p>

<pre><code class="sql">create user bootstrap3_sample with createdb password 'bootstrap3_sample';
</code></pre>

<p>上記SQLは以下コマンドと同じ効果があります</p>

<pre><code class="sh">createuser --username=postgres --createdb bootstrap3_sample -P
</code></pre>

<p><code>createuser</code>コマンドは<code>postgresql93(末尾の数字はバージョン番号なので適宜目置換を!)</code>RPMパッケージに付属しているPostgreSQLのデータベースユーザ(正確にはロール)を作成するためのコマンドです。SQLでのユーザ作成とは異なり、コマンドでパスワード文字列を指定することは出来ず、<code>-Pオプション</code>によってパスワード文字列を指定するプロンプトが表示されます。</p>

<p>データベースユーザのパスワードがシステムカタログ上に保存される際に暗号化するかどうかは<code>ENCRYPTED/UNENCRYPTED</code>で明示するか、そうでない場合は、<code>/var/lib/pgsql/9.3/data/postgresql.conf</code>の<code>password_encryption</code>設定パラメータに依ります。<code>password_encryption</code>設定パラメータがonの場合に暗号化が有効(default: on)です。</p>

<p>先述した通り、<strong><code>create user</code>SQLはログイン権限オプション(login)を明示しなくても有効となりますし、<code>createuser</code>コマンドでもログイン権限オプション(&ndash;login)がデフォルトで有効なので、ここでは指定していません。この辺りのSQLやコマンドの挙動はPostgreSQLバージョンにも依ると思うので自信の無い場合はログイン権限オプションを明示した方がいいかもしれません。</strong></p>

<h2 class="text-warning">Railsプロジェクトの作成</h2>


<p>新しいRailsプロジェクトを作成します。</p>

<pre><code class="sh">rails new bootstrap3_sample --database=postgresql
cd bootstrap3_sample
bundle exec spring stop
</code></pre>

<h2 class="text-warning">データベース接続情報を設定</h2>


<pre><code class="yml config/database.yml">default: &amp;default
  adapter: postgresql
  encoding: unicode
  pool: 5

development:
  &lt;&lt;: *default
  database: bootstrap3_sample_development
  user: bootstrap3_sample
  password: bootstrap3_sample

test:
  &lt;&lt;: *default
  database: bootstrap3_sample_test
  user: bootstrap3_sample
  password: bootstrap3_sample

production:
  &lt;&lt;: *default
  database: bootstrap3_sample_production
  username: bootstrap3_sample
  password: &lt;%= ENV['BOOTSTRAP3_SAMPLE_DATABASE_PASSWORD'] %&gt;
</code></pre>

<h2 class="text-warning">Gemライブラリのインストール</h2>


<p>Rails4でBootstrap3をインストールする簡単な方法は<code>Gemライブラリ</code>を使用することです。</p>

<p>今回はTwitter社公式の<a href="https://github.com/twbs/bootstrap-sass">bootstrap-sass</a>を使用します。</p>

<p>比較はしていませんが、<a href="https://github.com/anjlab/bootstrap-rails">anjlab-bootstrap-rails</a>などもあり、<a href="https://github.com/anjlab/anjlab-widgets">anjlab/anjlab-widgets</a>が使えることなどが特徴のようです。こちらのGemは<a href="https://github.com/twbs/bootstrap-sass">bootstrap-sass</a>との併用は推奨されていないようです。</p>

<p><br>
<code>Gemfile</code>に追記します。<code>therubyracer</code>はアンコメントすれば有効になります。</p>

<pre><code class="ruby Gemfile"># See https://github.com/sstephenson/execjs#readme for more supported runtimes
gem 'therubyracer',  platforms: :ruby

# Install Twitter Bootstrap3
# https://github.com/twbs/bootstrap-sass
gem 'bootstrap-sass', '~&gt; 3.2.0'

# -webkit-border-radius みたいなブラウザベンダープレフィックスをよしなに管理してくれる
# Parse CSS and add vendor prefixes to rules by Can I Use 
# https://twitter.com/autoprefixer
gem 'autoprefixer-rails'
</code></pre>

<p>Railsプロジェクト作成時の<code>Gemfile</code>と比較するとこのようになります。</p>

<pre><code class="diff">--- a/Gemfile
+++ b/Gemfile
@@ -12,7 +12,7 @@ gem 'uglifier', '&gt;= 1.3.0'
 # Use CoffeeScript for .js.coffee assets and views
 gem 'coffee-rails', '~&gt; 4.0.0'
 # See https://github.com/sstephenson/execjs#readme for more supported runtimes
-# gem 'therubyracer',  platforms: :ruby
+gem 'therubyracer',  platforms: :ruby

 # Use jquery as the JavaScript library
 gem 'jquery-rails'
@@ -38,3 +38,11 @@ gem 'spring',        group: :development
 # Use debugger
 # gem 'debugger', group: [:development, :test]

+# Install Twitter Bootstrap3
+# https://github.com/twbs/bootstrap-sass
+gem 'bootstrap-sass', '~&gt; 3.2.0'
+
+# -webkit-border-radius みたいなブラウザベンダープレフィックスをよしなに管理してくれる
+# Parse CSS and add vendor prefixes to rules by Can I Use
+# https://twitter.com/autoprefixer
+gem 'autoprefixer-rails'
</code></pre>

<p>Gemライブラリをインストールします。</p>

<pre><code class="sh">bundle install
</code></pre>

<h2 class="text-warning">bootstrap-sassを使用する準備</h2>


<p>今回は<code>Sass</code>というプリプロセッサに対応した<code>bootstrap3</code>をインストールしているのですが、<strong>CSSの<code>//= require</code>行はSassでは文法として使用できない</strong>ので注意が必要です。そして、<strong>Sass拡張子のファイルやその他のスタイルシートであっても、Bootstrapからmixinsや変数を利用できないので<code>//= require</code>行は利用できない</strong>ということです。</p>

<p><a href="https://github.com/twbs/bootstrap-sass#a-ruby-on-rails">本家GiHubのREADME</a>に従い、<code>app/assets/stylesheets/application.css</code>は削除します。</p>

<pre><code class="sh">rm app/assets/stylesheets/application.css
</code></pre>

<p><code>app/assets/stylesheets/application.css.scss</code>を新規作成します。</p>

<pre><code class="scss app/assets/stylesheets/application.css.scss">@import "bootstrap-sprockets";
@import "bootstrap";
</code></pre>

<p><code>app/assets/javascripts/application.js</code>にBootstrap関連のJavascriptsライブラリをrequireします。</p>

<pre><code class="javascript app/assets/javascripts/application.js">//= require bootstrap-sprockets
</code></pre>

<p><code>app/views/layouts/application.html.erb</code>の<code>head</code>タグに<strong>bootstrap関連のスタイルシートをincludeする設定とメディアクエリーを使用するためのviewport設定</strong>を追記します。</p>

<pre><code class="html app/views/layouts/application.html.erb  headタグ内の記述">  &lt;%= stylesheet_link_tag    "bootstrap", media: "all", "data-turbolinks-track" =&gt; true %&gt;
  &lt;meta content="width=device-width, initial-scale=1" name="viewport"&gt;
</code></pre>

<h2 class="text-warning">scaffoldで骨組みを生成</h2>


<p><code>scaffold</code>を実行します。</p>

<pre><code class="sh">bundle exec rails g scaffold Entry name:string description:string  
bundle exec rake db:create
bundle exec rake db:migrate
</code></pre>

<h2 class="text-warning">root_pathの設定</h2>


<p>scaffoldで生成されたentriesリソースのindexを<code>root_path</code>に設定します。</p>

<pre><code class="ruby config/routes.rb">  root 'entries#index'
</code></pre>

<p><br></p>

<h2 class="text-warning">ここでブレイク</h2>


<p>この段階で<code>rails server</code>コマンドを実行してWEBrickを起動すると以下のような画面が表示されます。</p>

<ul>
<li><a href="http://">http://</a>&lt; サーバIP >:3000</li>
</ul>


<p><img src="/images/install-bootstrap3-on-rails4_08.jpg" alt="" /></p>

<h1 class="text-danger">ここからBootstrapを使っていきます</h1>


<h2 class="text-warning">ナビゲーションメニュー</h2>


<p><img src="/images/install-bootstrap3-on-rails4_01.jpg" alt="" /></p>

<p><code>body</code>タグの上部にナビゲーションメニューを設置してみます。</p>

<pre><code class="html application.html.erb">  &lt;div class="navbar navbar-inverse navbar-fixed-top" role="navigation"&gt;
    &lt;div class="container"&gt;
      &lt;div class="navbar-header"&gt;
        &lt;button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse"&gt;
          &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt;
          &lt;span class="icon-bar"&gt;&lt;/span&gt;
          &lt;span class="icon-bar"&gt;&lt;/span&gt;
          &lt;span class="icon-bar"&gt;&lt;/span&gt;
        &lt;/button&gt;
        &lt;a class="navbar-brand" href="http://yoursite.com/"&gt;Project name&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="collapse navbar-collapse"&gt;
        &lt;ul class="nav navbar-nav"&gt;
          &lt;li class="active"&gt;&lt;a href="http://yoursite.com/"&gt;Home&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#about"&gt;About&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#contact"&gt;Contact&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
        &lt;form class="navbar-form navbar-left"&gt;
          &lt;input type="text" class="form-control col-lg-8" placeholder="Search"&gt;
        &lt;/form&gt;
      &lt;/div&gt;&lt;!--/.nav-collapse --&gt;
    &lt;/div&gt;&lt;!-- /.container --&gt;
  &lt;/div&gt;&lt;!-- /.navbar --&gt;
</code></pre>

<h2 class="text-warning">Jumbotron(ジャンボトロン)</h2>


<p><img src="/images/install-bootstrap3-on-rails4_02.jpg" alt="" /></p>

<p><code>Jumbotron(ジャンボトロン)</code>と呼ばれるページトップなどに表示する見出しユニットを<code>body</code>タグの上部、ナビゲーションメニューの下あたりに設置してみます。</p>

<p>まず、<code>app/assets/stylesheets/theme-style.css.scss</code>を作成し、スタイルを追加します。</p>

<pre><code class="scss app/assets/stylesheets/theme-style.css.scss">body {
  padding-top: 70px;
  padding-bottom: 30px;
}

.theme-dropdown .dropdown-menu {
  position: static;
  display: block;
  margin-bottom: 20px;
}

.theme-showcase &gt; p &gt; .btn {
  margin: 5px 0;
}

.theme-showcase .navbar .container {
  width: auto;
}
</code></pre>

<p><code>app/assets/stylesheets/application.css.scss</code>に作成した<code>theme-style.css.scss</code>を読む込むように設定します。</p>

<pre><code class="scss app/assets/stylesheets/application.css.scss">@import "theme-style";
</code></pre>

<p>次にJumbotron(ジャンボトロン)を表示するためのコードを記述します。</p>

<pre><code class="html app/views/layouts/application.html.erb">  &lt;div class="container theme-showcase" role="main"&gt;
    &lt;!-- Main jumbotron --&gt;
    &lt;div class="jumbotron"&gt;
      &lt;h1&gt;Hello, world!&lt;/h1&gt;
      &lt;p class="text-warning"&gt;bootstrap3-sample&lt;/p&gt;
    &lt;/div&gt;&lt;!-- /.jumbotron --&gt;

    &lt;%= yield %&gt;

  &lt;/div&gt;&lt;!-- /.container --&gt;
</code></pre>

<h2 class="text-warning">Railsのフラッシュメッセージ表示</h2>


<p><img src="/images/install-bootstrap3-on-rails4_03.jpg" alt="" /></p>

<p>後述する<code>app/views/entries/show.html.erb</code>に<code>&lt;%= notice %&gt;</code>というフラッシュメッセージを表示するコードがscaffoldによって自動生成されているのですが、Bootstrap3の<code>Alertsコンポーネント</code>を使って見栄えを良くすると同時に、先述したJumbotron(ジャンボトロン)の上部に表示するために<code>app/views/layouts/application.html.erb</code>に移動しlます。</p>

<pre><code class="erb app/views/layouts/application.html.erb">  &lt;% if (notice) %&gt;
    &lt;div class="alert alert-info alert-dismissible" role="alert"&gt;
      &lt;button type="button" class="close" data-dismiss="alert"&gt;
        &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
        &lt;span class="sr-only"&gt;閉じる&lt;/span&gt;
      &lt;/button&gt;
      &lt;strong&gt;&lt;%= notice %&gt;&lt;/strong&gt;
    &lt;/div&gt;
  &lt;% end %&gt;
</code></pre>

<h2 class="text-warning">entriesリソースのビューファイルを修正</h2>


<p>scaffoldで生成したビューファイルに色々とBootstrap3のスタイルを適用していきます。</p>

<h3 class="text-success">app/views/entries/index.html.erb</h3>


<p><img src="/images/install-bootstrap3-on-rails4_04.jpg" alt="" /></p>

<p>&#8220;`html app/views/entries/index.html.erb</p>

<h1>Listing entries</h1>


<p><button type="button" class="btn btn-lg btn-default">
  &lt;%= link_to &lsquo;New Entry&rsquo;, new_entry_path %>
</button>
<br></p>

<div class="col-md-6">
  <table class="table table-striped">
    <thead>
      <tr>
        <th>Name</th>
        <th>Descriptiion</th>
        <th colspan="3"></th>
      </tr>
    </thead>
    <tbody>
      <% @entries.each do |entry| %>
        <tr>
          <td><%= entry.name %></td>
          <td><%= entry.description %></td>
          <td><%= link_to 'Show', entry %></td>
          <td><%= link_to 'Edit', edit_entry_path(entry) %></td>
          <td><%= link_to 'Destroy', entry, method: :delete, data: { confirm: 'Are you sure?' } %></td>
        </tr>
      <% end %>
    </tbody>
  </table>
</div>


<p>&#8220;`</p>

<h3 class="text-success">app/views/entries/show.html.erb</h3>


<p><img src="/images/install-bootstrap3-on-rails4_05.jpg" alt="" /></p>

<p>&#8220;`html app/views/entries/show.html.erb</p>

<div class="col-md-6">
  <table class="table table-striped">
    <thead>
      <tr>
        <th>Name</th>
        <th>Descriptiion</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><%= @entry.name %></td>
        <td><%= @entry.description %></td>
        <td><%= link_to 'Edit', edit_entry_path(@entry) %></td>
      </tr>
    </tbody>
  </table>

  <button type="button" class="btn pull-right btn-lg btn-default">
    <%= link_to 'Back', entries_path %>
  </button>

</div>


<p>&#8220;`</p>

<h3 class="text-success">app/views/entries/new.html.erb</h3>


<p><img src="/images/install-bootstrap3-on-rails4_06.jpg" alt="" /></p>

<p>&#8220;`html app/views/entries/new.html.erb</p>

<h1>New entry</h1>




<div class="col-md-6">
  <%= render 'form' %>

  <button type="button" class="btn pull-right btn-lg btn-default">
    <%= link_to 'Back', entries_path %>
  </button>

</div>


<p>&#8220;`</p>

<h3 class="text-success">app/views/entries/edit.html.erb</h3>


<p><img src="/images/install-bootstrap3-on-rails4_07.jpg" alt="" /></p>

<p>&#8220;`html app/views/entries/edit.html.erb</p>

<h1>Editing entry</h1>




<div class="col-md-6">
  <%= render 'form' %>

  <button type="button" class="btn pull-right btn-lg btn-default">
    <%= link_to 'Back', entries_path %>
  </button>

</div>


<p>&#8220;`</p>

<h3 class="text-success">app/views/entries/_form.html.erb</h3>


<pre><code class="html app/views/entries/_form.html.erb">&lt;%= form_for( (@entry), {:role =&gt; "form"} ) do |f| %&gt;
  &lt;% if @entry.errors.any? %&gt;
    &lt;div id="error_explanation"&gt;
      &lt;h2&gt;&lt;%= pluralize(@entry.errors.count, "error") %&gt; prohibited this entry from being saved:&lt;/h2&gt;

      &lt;ul&gt;
      &lt;% @entry.errors.full_messages.each do |message| %&gt;
        &lt;li&gt;&lt;%= message %&gt;&lt;/li&gt;
      &lt;% end %&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;% end %&gt;

  &lt;table class="table table-striped"&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;&lt;%= f.label :name %&gt;&lt;/th&gt;
        &lt;th&gt;&lt;%= f.label :description %&gt;&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;%= f.text_field :name %&gt;&lt;/td&gt;
        &lt;td&gt;&lt;%= f.text_field :description %&gt;&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;

  &lt;%= f.submit :class =&gt; "btn btn-default" %&gt;

&lt;% end %&gt;
</code></pre>

<h1>herokuにpushしてみる</h1>

<p><a href="https://devcenter.heroku.com/articles/getting-started-with-rails4">https://devcenter.heroku.com/articles/getting-started-with-rails4</a></p>

<h2 class="text-warning">Herokuを使う準備</h2>




<h3 class="text-success">production環境でのアセットコンパイルを有効にする</h3>


<p><code>config/environments/production.rb</code>を修正して<code>production環境でのassets</code>を有効にします。</p>

<p>以下の設定パラメータを設定します。</p>

<pre><code class="ruby config/environments/production.rb">config.cache_classes = true
config.serve_static_assets = true
config.assets.compile = true
config.assets.digest = true
</code></pre>

<p>修正後の<code>config/environments/production.rb</code>のdiff情報です。</p>

<pre><code class="diff config/environments/production.rb">--- a/config/environments/production.rb
+++ b/config/environments/production.rb
@@ -20,14 +20,14 @@ Rails.application.configure do
   # config.action_dispatch.rack_cache = true

   # Disable Rails's static asset server (Apache or nginx will already do this).
-  config.serve_static_assets = false
+  config.serve_static_assets = true

   # Compress JavaScripts and CSS.
   config.assets.js_compressor = :uglifier
   # config.assets.css_compressor = :sass

   # Do not fallback to assets pipeline if a precompiled asset is missed.
-  config.assets.compile = false
+  config.assets.compile = true

   # Generate digests for assets URLs.
   config.assets.digest = true
</code></pre>

<h3 class="text-success">gitレポジトリを作成</h3>


<p>herokuに対するアプリケーションのデプロイ方法は<code>git push</code>を行うことなので、ローカル環境でgitレポジトリを作成します。</p>

<pre><code class="sh">cd /path/to/app
git init .
git add ./
git commit -m "initial commit"
</code></pre>

<h3 class="text-success">herokuにアカウントを登録</h3>


<p><a href="https://id.heroku.com/signup/devcenter">こちらからherokuにアカウントを登録する</a></p>

<h3 class="text-success">heroku toolbelt インストール</h3>


<p><a href="https://toolbelt.heroku.com/">heroku toolbelt</a>とは、<strong>heroku appsの作成や管理を行うためのHerokuクライアントで、実体は<code>herokuコマンドファイル</code></strong>です。</p>

<p><code>herokuコマンド</code>をインストールする方法は、OSプラットフォームにより3パターンあります。</p>

<ol>
<li><a href="https://toolbelt.heroku.com/osx">Mac OSX</a>、または<a href="https://toolbelt.heroku.com/windows">Windows</a>ではパッケージが提供されていますのでパッケージをダウンロードしてインストールします。</li>
<li><a href="https://toolbelt.heroku.com/debian">Debian/Ubuntu</a>にもdeb形式のパッケージが公開されていますが、こちらは直接ダウンロードするのではなく<a href="https://toolbelt.heroku.com/install-ubuntu.sh">インストールスクリプト</a>を利用します。</li>
<li><a href="https://toolbelt.heroku.com/standalone">Debian/Ubuntu以外のUnix/Linux</a>ではxzファイルフォーマットで圧縮されたtarボールで配布されています。こちらも<a href="https://toolbelt.heroku.com/install.sh">インストールスクリプト</a>を利用します。</li>
</ol>


<p><br>
今回は<code>CentOS6</code>なので3番目の<a href="https://toolbelt.heroku.com/install.sh">インストールスクリプト</a>を利用します。<a href="https://toolbelt.heroku.com/standalone">https://toolbelt.heroku.com/standalone</a>の内容に沿ってインストールします。</p>

<p>注意点としては、<a href="https://toolbelt.heroku.com/install.sh">インストールスクリプト</a>の実行は<code>sudo</code>権限を持つユーザである必要があります(中でsudoを実行しているため)。</p>

<pre><code class="sh">wget -qO- https://toolbelt.heroku.com/install.sh | sh
</code></pre>

<p>これで<code>/usr/local/heroku/bin</code>以下に<code>herokuコマンド</code>がインストールされるので、<code>$PATH</code>環境変数に<code>/usr/local/heroku/bin</code>へのパスを設定しておきます。</p>

<pre><code class="sh">echo 'export PATH=${PATH}:/usr/local/heroku/bin' &gt;&gt; ~/.bashrc
</code></pre>

<h3 class="text-success">heroku toolbelt を使ってherokuへログイン</h3>


<p><code>heroku</code>コマンドラインツールを使ってログインします。先ほど作成した<code>herokuアカウント</code>のメールアドレスとパスワードを入力し、<code>Authentication successful.</code>と表示されればログイン成功です。また、該当Unixユーザでのログインが初めての場合は公開鍵認証に関する設定を行う場合があります。</p>

<pre><code class="sh">heroku login
</code></pre>

<h3 class="text-success">heroku appsを作成</h3>


<p>今回は<code>buf-material-bootstrap3-sample</code>という名前のアプリケーションをheroku上に作成します。</p>

<pre><code class="sh">heroku apps:create buf-material-bootstrap3-sample
</code></pre>

<p>コマンドの結果が以下のように表示されます。</p>

<p>URLが<a href="http://buf-material-bootstrap3-sample.herokuapp.com/">http://buf-material-bootstrap3-sample.herokuapp.com/</a>で、heroku上に作成されるgitレポジトリのURLがgit@heroku.com:buf-material-bootstrap3-sample.git となりました。</p>

<pre><code class="text heroku apps:create buf-material-bootstrap3-sample コマンド結果">Creating buf-material-bootstrap3-sample... done, stack is cedar
http://buf-material-bootstrap3-sample.herokuapp.com/ | git@heroku.com:buf-material-bootstrap3-sample.git
Git remote heroku added
</code></pre>

<h3 class="text-success">heroku appsにアプリケーションをデプロイ & DBマイグレーション</h3>


<p>herokuへのアプリケーションデプロイはなんと<code>git push heroku master</code>1発なのです!</p>

<p>DBマイグレーションをお忘れなく。</p>

<pre><code class="sh">git push heroku master
heroku run rake db:migrate
</code></pre>

<p>これで <a href="http://buf-material-bootstrap3-sample.herokuapp.com/" target="_blank"><a href="http://buf-material-bootstrap3-sample.herokuapp.com/">http://buf-material-bootstrap3-sample.herokuapp.com/</a></a> にアクセスすると先ほどローカル環境で見ていたアプリケーション画面が表示されました。
<br></p>

<p><a href="http://buf-material-bootstrap3-sample.herokuapp.com/" target="_blank">サンプルアプリケーション</a>
<br></p>

<p><a href="http://buf-material-bootstrap3-sample.herokuapp.com/" target="_blank">
  <img src="http://yoursite.com/images/install-bootstrap3-on-rails4_08.jpg">
</a>
<br>
<br></p>
]]></content>
  </entry>
  
</feed>
