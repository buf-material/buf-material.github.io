<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Postgresql | My Octopress Blog]]></title>
  <link href="http://yoursite.com/blog/categories/postgresql/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2014-12-14T16:53:52+09:00</updated>
  <id>http://yoursite.com/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[CentOS6でPostgreSQLインストール]]></title>
    <link href="http://yoursite.com/blog/2014/10/02/install-postgresql-to-centos6-for-rails4/"/>
    <updated>2014-10-02T14:57:55+09:00</updated>
    <id>http://yoursite.com/blog/2014/10/02/install-postgresql-to-centos6-for-rails4</id>
    <content type="html"><![CDATA[<p><a href="http://buf-material.github.io/blog/2014/09/22/install-bootstrap3-on-rails4/">Rails4でBootstrap3を使う(ついでにherokuへpush)</a>で書いたエントリーから<code>PostgreSQL</code>インストール手順を抜き出しただけのエントリーです。</p>

<h2 class="text-warning">PostgreSQLの準備</h2>


<h3 class="text-success">PostgreSQLインストール</h3>


<p>PostgreSQLの公式yumレポジトリからインストールします。</p>

<pre><code class="sh">yum install -y http://yum.postgresql.org/9.3/redhat/rhel-6-x86_64/pgdg-redhat93-9.3-1.noarch.rpm
yum install -y postgresql93-server postgresql93-contrib postgresql93-devel
</code></pre>

<p>PostgreSQLインストール直後のデータベースディレクトリである<code>/var/lib/pgsql/9.3/data</code>を削除してデータベースを初期化(<code>initdb</code>)し、<code>postgresql-9.3サービス</code>を起動します。ついでに、自動起動も設定します。</p>

<pre><code class="sh">rm -rf /var/lib/pgsql/9.3/data
service postgresql-9.3 initdb
service postgresql-9.3 start
chkconfig postgresql-9.3 on
</code></pre>

<h3 class="text-success">PostgreSQLの認証方式をPeerからTrustへ変更</h3>


<p><a href="https://www.postgresql.jp/document/9.3/html/auth-methods.html">https://www.postgresql.jp/document/9.3/html/auth-methods.html</a></p>

<p>PostgreSQLではデフォルトの認証方式として<code>Peer認証</code>が設定されています。Peer認証とは、カーネルからクライアント上のシステムユーザ名を取得し、PostgreSQLデータベースユーザと同一である場合のみ接続が許可される仕組みです。PostgreSQLでは、デフォルトでは<code>postgres</code>データベースユーザしか存在しないため、UnixユーザもPostgreSQLをパッケージインストールすると作成されている<code>postgres</code>である必要があります(<code>su - postgres</code>しないとダメということ)。</p>

<p><strong><code>Peer認証</code>だとUnixのスーパーユーザである<code>root</code>であってもpostgresデータベースユーザへの接続は許可されません。</strong></p>

<pre><code class="sh"># id
uid=0(root) gid=0(root) 所属グループ=0(root)

# psql --username=postgres
psql: FATAL:  ユーザ "postgres" で対向(peer)認証に失敗しました
</code></pre>

<p>今回は、<strong>サーバに接続できる全Unixユーザから全データベースユーザへの接続が許可される<code>Trust認証</code>に変更します</strong>。</p>

<p><code>Peer認証</code>から<code>Trust認証</code>への変更は<code>/var/lib/pgsql/9.3/data/pg_hba.conf</code>を修正します。</p>

<pre><code class="text /var/lib/pgsql/9.3/data/pg_hba.conf">#local   all             all                                     peer
local   all             all                                     trust
</code></pre>

<p>設定ファイルを修正したので<code>postgresql-9.3</code>サービスを再起動します。</p>

<pre><code class="sh">service postgresql-9.3 restart
</code></pre>

<h3 class="text-success">Railsアプリケーション用のデータベースユーザを作成</h3>


<h4><p class="text-danger">PostgreSQL 9.3ではCREATE USERはCREATE ROLEの別名になりました。 唯一の違いは、CREATE USERという名前でコマンドが呼び出されると、デフォルトでLOGINになり、CREATE ROLEという名前でコマンドが呼び出されると、デフォルトでNOLOGINとなる点です。</p></h4>


<p><a href="https://www.postgresql.jp/document/9.3/html/sql-createuser.html">https://www.postgresql.jp/document/9.3/html/sql-createuser.html</a></p>

<p><br>
PostgreSQLのスーパーユーザである<code>postgres</code>データベースユーザで接続します。</p>

<pre><code class="sh">psql --username=postgres
</code></pre>

<p>今回作成するRailsアプリケーションのプロジェクト名と同一の<code>bootstrap3_sample</code>というデータベースユーザを作成し、データベース作成権限とログイン権限を持つように設定します。</p>

<pre><code class="sql">create user bootstrap3_sample with createdb password 'bootstrap3_sample';
</code></pre>

<p>上記SQLは以下コマンドと同じ効果があります</p>

<pre><code class="sh">createuser --username=postgres --createdb bootstrap3_sample -P
</code></pre>

<p><code>createuser</code>コマンドは<code>postgresql93(末尾の数字はバージョン番号なので適宜目置換を!)</code>RPMパッケージに付属しているPostgreSQLのデータベースユーザ(正確にはロール)を作成するためのコマンドです。SQLでのユーザ作成とは異なり、コマンドでパスワード文字列を指定することは出来ず、<code>-Pオプション</code>によってパスワード文字列を指定するプロンプトが表示されます。</p>

<p>データベースユーザのパスワードがシステムカタログ上に保存される際に暗号化するかどうかは<code>ENCRYPTED/UNENCRYPTED</code>で明示するか、そうでない場合は、<code>/var/lib/pgsql/9.3/data/postgresql.conf</code>の<code>password_encryption</code>設定パラメータに依ります。<code>password_encryption</code>設定パラメータがonの場合に暗号化が有効(default: on)です。</p>

<p>先述した通り、<strong><code>create user</code>SQLはログイン権限オプション(login)を明示しなくても有効となりますし、<code>createuser</code>コマンドでもログイン権限オプション(&ndash;login)がデフォルトで有効なので、ここでは指定していません。この辺りのSQLやコマンドの挙動はPostgreSQLバージョンにも依ると思うので自信の無い場合はログイン権限オプションを明示した方がいいかもしれません。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails4でBootstrap3を使う(ついでにherokuへpush)]]></title>
    <link href="http://yoursite.com/blog/2014/09/22/install-bootstrap3-on-rails4/"/>
    <updated>2014-09-22T14:57:55+09:00</updated>
    <id>http://yoursite.com/blog/2014/09/22/install-bootstrap3-on-rails4</id>
    <content type="html"><![CDATA[<p><a href="http://buf-material-bootstrap3-sample.herokuapp.com/" target="_blank">サンプルアプリケーション</a>
<br></p>

<p><a href="http://buf-material-bootstrap3-sample.herokuapp.com/" target="_blank">
  <img src="http://yoursite.com/images/install-bootstrap3-on-rails4_08.jpg">
</a>
<br>
<br></p>

<p>今まではRailsアプリケーションのデザインを独学でCSS書いたりjQueryプラグイン入れたりしてたのですが、今更ながらboootstrapを利用しようと思い始めました。</p>

<p><a href="http://rubyonrails.org/">Ruby on Rails</a>でBootstrap3をインストールする手順を纏めておきます。</p>

<p>今回はRailsアプリケーションのプロジェクト名として<code>bootstrap3_sample</code>という文字を使用することにします。</p>

<p>また、ここで使用しているRailsバージョンは<code>Rails 4.1.6</code>です。</p>

<pre><code class="sh">$ cd /path/to/rails_app
$ bundle exec rails -v
Rails 4.1.6
</code></pre>

<p>作成したアプリケーションは<a href="https://www.heroku.com/">heroku</a>にpushしますのでRailsのデータベースドライバとして<code>PostgreSQL</code>を選択します。それに併せてPostgreSQLのインストールや設定についても自分への備忘録として残しておきます。</p>

<h1>Bootstrapを使用するまで</h1>

<h2 class="text-warning">PostgreSQLの準備</h2>


<h3 class="text-success">PostgreSQLインストール</h3>


<p>PostgreSQLの公式yumレポジトリからインストールします。</p>

<pre><code class="sh">yum install -y http://yum.postgresql.org/9.3/redhat/rhel-6-x86_64/pgdg-redhat93-9.3-1.noarch.rpm
yum install -y postgresql93-server postgresql93-contrib postgresql93-devel
</code></pre>

<p>PostgreSQLインストール直後のデータベースディレクトリである<code>/var/lib/pgsql/9.3/data</code>を削除してデータベースを初期化(<code>initdb</code>)し、<code>postgresql-9.3サービス</code>を起動します。ついでに、自動起動も設定します。</p>

<pre><code class="sh">rm -rf /var/lib/pgsql/9.3/data
service postgresql-9.3 initdb
service postgresql-9.3 start
chkconfig postgresql-9.3 on
</code></pre>

<h3 class="text-success">PostgreSQLの認証方式をPeerからTrustへ変更</h3>


<p><a href="https://www.postgresql.jp/document/9.3/html/auth-methods.html">https://www.postgresql.jp/document/9.3/html/auth-methods.html</a></p>

<p>PostgreSQLではデフォルトの認証方式として<code>Peer認証</code>が設定されています。Peer認証とは、カーネルからクライアント上のシステムユーザ名を取得し、PostgreSQLデータベースユーザと同一である場合のみ接続が許可される仕組みです。PostgreSQLでは、デフォルトでは<code>postgres</code>データベースユーザしか存在しないため、UnixユーザもPostgreSQLをパッケージインストールすると作成されている<code>postgres</code>である必要があります(<code>su - postgres</code>しないとダメということ)。</p>

<p><strong><code>Peer認証</code>だとUnixのスーパーユーザである<code>root</code>であってもpostgresデータベースユーザへの接続は許可されません。</strong></p>

<pre><code class="sh"># id
uid=0(root) gid=0(root) 所属グループ=0(root)

# psql --username=postgres
psql: FATAL:  ユーザ "postgres" で対向(peer)認証に失敗しました
</code></pre>

<p>今回は、<strong>サーバに接続できる全Unixユーザから全データベースユーザへの接続が許可される<code>Trust認証</code>に変更します</strong>。</p>

<p><code>Peer認証</code>から<code>Trust認証</code>への変更は<code>/var/lib/pgsql/9.3/data/pg_hba.conf</code>を修正します。</p>

<pre><code class="text /var/lib/pgsql/9.3/data/pg_hba.conf">#local   all             all                                     peer
local   all             all                                     trust
</code></pre>

<p>設定ファイルを修正したので<code>postgresql-9.3</code>サービスを再起動します。</p>

<pre><code class="sh">service postgresql-9.3 restart
</code></pre>

<h3 class="text-success">Railsアプリケーション用のデータベースユーザを作成</h3>


<h4><p class="text-danger">PostgreSQL 9.3ではCREATE USERはCREATE ROLEの別名になりました。 唯一の違いは、CREATE USERという名前でコマンドが呼び出されると、デフォルトでLOGINになり、CREATE ROLEという名前でコマンドが呼び出されると、デフォルトでNOLOGINとなる点です。</p></h4>


<p><a href="https://www.postgresql.jp/document/9.3/html/sql-createuser.html">https://www.postgresql.jp/document/9.3/html/sql-createuser.html</a></p>

<p><br>
PostgreSQLのスーパーユーザである<code>postgres</code>データベースユーザで接続します。</p>

<pre><code class="sh">psql --username=postgres
</code></pre>

<p>今回作成するRailsアプリケーションのプロジェクト名と同一の<code>bootstrap3_sample</code>というデータベースユーザを作成し、データベース作成権限とログイン権限を持つように設定します。</p>

<pre><code class="sql">create user bootstrap3_sample with createdb password 'bootstrap3_sample';
</code></pre>

<p>上記SQLは以下コマンドと同じ効果があります</p>

<pre><code class="sh">createuser --username=postgres --createdb bootstrap3_sample -P
</code></pre>

<p><code>createuser</code>コマンドは<code>postgresql93(末尾の数字はバージョン番号なので適宜目置換を!)</code>RPMパッケージに付属しているPostgreSQLのデータベースユーザ(正確にはロール)を作成するためのコマンドです。SQLでのユーザ作成とは異なり、コマンドでパスワード文字列を指定することは出来ず、<code>-Pオプション</code>によってパスワード文字列を指定するプロンプトが表示されます。</p>

<p>データベースユーザのパスワードがシステムカタログ上に保存される際に暗号化するかどうかは<code>ENCRYPTED/UNENCRYPTED</code>で明示するか、そうでない場合は、<code>/var/lib/pgsql/9.3/data/postgresql.conf</code>の<code>password_encryption</code>設定パラメータに依ります。<code>password_encryption</code>設定パラメータがonの場合に暗号化が有効(default: on)です。</p>

<p>先述した通り、<strong><code>create user</code>SQLはログイン権限オプション(login)を明示しなくても有効となりますし、<code>createuser</code>コマンドでもログイン権限オプション(&ndash;login)がデフォルトで有効なので、ここでは指定していません。この辺りのSQLやコマンドの挙動はPostgreSQLバージョンにも依ると思うので自信の無い場合はログイン権限オプションを明示した方がいいかもしれません。</strong></p>

<h2 class="text-warning">Railsプロジェクトの作成</h2>


<p>新しいRailsプロジェクトを作成します。</p>

<pre><code class="sh">rails new bootstrap3_sample --database=postgresql
cd bootstrap3_sample
bundle exec spring stop
</code></pre>

<h2 class="text-warning">データベース接続情報を設定</h2>


<pre><code class="yml config/database.yml">default: &amp;default
  adapter: postgresql
  encoding: unicode
  pool: 5

development:
  &lt;&lt;: *default
  database: bootstrap3_sample_development
  user: bootstrap3_sample
  password: bootstrap3_sample

test:
  &lt;&lt;: *default
  database: bootstrap3_sample_test
  user: bootstrap3_sample
  password: bootstrap3_sample

production:
  &lt;&lt;: *default
  database: bootstrap3_sample_production
  username: bootstrap3_sample
  password: &lt;%= ENV['BOOTSTRAP3_SAMPLE_DATABASE_PASSWORD'] %&gt;
</code></pre>

<h2 class="text-warning">Gemライブラリのインストール</h2>


<p>Rails4でBootstrap3をインストールする簡単な方法は<code>Gemライブラリ</code>を使用することです。</p>

<p>今回はTwitter社公式の<a href="https://github.com/twbs/bootstrap-sass">bootstrap-sass</a>を使用します。</p>

<p>比較はしていませんが、<a href="https://github.com/anjlab/bootstrap-rails">anjlab-bootstrap-rails</a>などもあり、<a href="https://github.com/anjlab/anjlab-widgets">anjlab/anjlab-widgets</a>が使えることなどが特徴のようです。こちらのGemは<a href="https://github.com/twbs/bootstrap-sass">bootstrap-sass</a>との併用は推奨されていないようです。</p>

<p><br>
<code>Gemfile</code>に追記します。<code>therubyracer</code>はアンコメントすれば有効になります。</p>

<pre><code class="ruby Gemfile"># See https://github.com/sstephenson/execjs#readme for more supported runtimes
gem 'therubyracer',  platforms: :ruby

# Install Twitter Bootstrap3
# https://github.com/twbs/bootstrap-sass
gem 'bootstrap-sass', '~&gt; 3.2.0'

# -webkit-border-radius みたいなブラウザベンダープレフィックスをよしなに管理してくれる
# Parse CSS and add vendor prefixes to rules by Can I Use 
# https://twitter.com/autoprefixer
gem 'autoprefixer-rails'
</code></pre>

<p>Railsプロジェクト作成時の<code>Gemfile</code>と比較するとこのようになります。</p>

<pre><code class="diff">--- a/Gemfile
+++ b/Gemfile
@@ -12,7 +12,7 @@ gem 'uglifier', '&gt;= 1.3.0'
 # Use CoffeeScript for .js.coffee assets and views
 gem 'coffee-rails', '~&gt; 4.0.0'
 # See https://github.com/sstephenson/execjs#readme for more supported runtimes
-# gem 'therubyracer',  platforms: :ruby
+gem 'therubyracer',  platforms: :ruby

 # Use jquery as the JavaScript library
 gem 'jquery-rails'
@@ -38,3 +38,11 @@ gem 'spring',        group: :development
 # Use debugger
 # gem 'debugger', group: [:development, :test]

+# Install Twitter Bootstrap3
+# https://github.com/twbs/bootstrap-sass
+gem 'bootstrap-sass', '~&gt; 3.2.0'
+
+# -webkit-border-radius みたいなブラウザベンダープレフィックスをよしなに管理してくれる
+# Parse CSS and add vendor prefixes to rules by Can I Use
+# https://twitter.com/autoprefixer
+gem 'autoprefixer-rails'
</code></pre>

<p>Gemライブラリをインストールします。</p>

<pre><code class="sh">bundle install
</code></pre>

<h2 class="text-warning">bootstrap-sassを使用する準備</h2>


<p>今回は<code>Sass</code>というプリプロセッサに対応した<code>bootstrap3</code>をインストールしているのですが、<strong>CSSの<code>//= require</code>行はSassでは文法として使用できない</strong>ので注意が必要です。そして、<strong>Sass拡張子のファイルやその他のスタイルシートであっても、Bootstrapからmixinsや変数を利用できないので<code>//= require</code>行は利用できない</strong>ということです。</p>

<p><a href="https://github.com/twbs/bootstrap-sass#a-ruby-on-rails">本家GiHubのREADME</a>に従い、<code>app/assets/stylesheets/application.css</code>は削除します。</p>

<pre><code class="sh">rm app/assets/stylesheets/application.css
</code></pre>

<p><code>app/assets/stylesheets/application.css.scss</code>を新規作成します。</p>

<pre><code class="scss app/assets/stylesheets/application.css.scss">@import "bootstrap-sprockets";
@import "bootstrap";
</code></pre>

<p><code>app/assets/javascripts/application.js</code>にBootstrap関連のJavascriptsライブラリをrequireします。</p>

<pre><code class="javascript app/assets/javascripts/application.js">//= require bootstrap-sprockets
</code></pre>

<p><code>app/views/layouts/application.html.erb</code>の<code>head</code>タグに<strong>bootstrap関連のスタイルシートをincludeする設定とメディアクエリーを使用するためのviewport設定</strong>を追記します。</p>

<pre><code class="html app/views/layouts/application.html.erb  headタグ内の記述">  &lt;%= stylesheet_link_tag    "bootstrap", media: "all", "data-turbolinks-track" =&gt; true %&gt;
  &lt;meta content="width=device-width, initial-scale=1" name="viewport"&gt;
</code></pre>

<h2 class="text-warning">scaffoldで骨組みを生成</h2>


<p><code>scaffold</code>を実行します。</p>

<pre><code class="sh">bundle exec rails g scaffold Entry name:string description:string  
bundle exec rake db:create
bundle exec rake db:migrate
</code></pre>

<h2 class="text-warning">root_pathの設定</h2>


<p>scaffoldで生成されたentriesリソースのindexを<code>root_path</code>に設定します。</p>

<pre><code class="ruby config/routes.rb">  root 'entries#index'
</code></pre>

<p><br></p>

<h2 class="text-warning">ここでブレイク</h2>


<p>この段階で<code>rails server</code>コマンドを実行してWEBrickを起動すると以下のような画面が表示されます。</p>

<ul>
<li><a href="http://">http://</a>&lt; サーバIP >:3000</li>
</ul>


<p><img src="/images/install-bootstrap3-on-rails4_08.jpg" alt="" /></p>

<h1 class="text-danger">ここからBootstrapを使っていきます</h1>


<h2 class="text-warning">ナビゲーションメニュー</h2>


<p><img src="/images/install-bootstrap3-on-rails4_01.jpg" alt="" /></p>

<p><code>body</code>タグの上部にナビゲーションメニューを設置してみます。</p>

<pre><code class="html application.html.erb">  &lt;div class="navbar navbar-inverse navbar-fixed-top" role="navigation"&gt;
    &lt;div class="container"&gt;
      &lt;div class="navbar-header"&gt;
        &lt;button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse"&gt;
          &lt;span class="sr-only"&gt;Toggle navigation&lt;/span&gt;
          &lt;span class="icon-bar"&gt;&lt;/span&gt;
          &lt;span class="icon-bar"&gt;&lt;/span&gt;
          &lt;span class="icon-bar"&gt;&lt;/span&gt;
        &lt;/button&gt;
        &lt;a class="navbar-brand" href="http://yoursite.com/"&gt;Project name&lt;/a&gt;
      &lt;/div&gt;
      &lt;div class="collapse navbar-collapse"&gt;
        &lt;ul class="nav navbar-nav"&gt;
          &lt;li class="active"&gt;&lt;a href="http://yoursite.com/"&gt;Home&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#about"&gt;About&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href="#contact"&gt;Contact&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
        &lt;form class="navbar-form navbar-left"&gt;
          &lt;input type="text" class="form-control col-lg-8" placeholder="Search"&gt;
        &lt;/form&gt;
      &lt;/div&gt;&lt;!--/.nav-collapse --&gt;
    &lt;/div&gt;&lt;!-- /.container --&gt;
  &lt;/div&gt;&lt;!-- /.navbar --&gt;
</code></pre>

<h2 class="text-warning">Jumbotron(ジャンボトロン)</h2>


<p><img src="/images/install-bootstrap3-on-rails4_02.jpg" alt="" /></p>

<p><code>Jumbotron(ジャンボトロン)</code>と呼ばれるページトップなどに表示する見出しユニットを<code>body</code>タグの上部、ナビゲーションメニューの下あたりに設置してみます。</p>

<p>まず、<code>app/assets/stylesheets/theme-style.css.scss</code>を作成し、スタイルを追加します。</p>

<pre><code class="scss app/assets/stylesheets/theme-style.css.scss">body {
  padding-top: 70px;
  padding-bottom: 30px;
}

.theme-dropdown .dropdown-menu {
  position: static;
  display: block;
  margin-bottom: 20px;
}

.theme-showcase &gt; p &gt; .btn {
  margin: 5px 0;
}

.theme-showcase .navbar .container {
  width: auto;
}
</code></pre>

<p><code>app/assets/stylesheets/application.css.scss</code>に作成した<code>theme-style.css.scss</code>を読む込むように設定します。</p>

<pre><code class="scss app/assets/stylesheets/application.css.scss">@import "theme-style";
</code></pre>

<p>次にJumbotron(ジャンボトロン)を表示するためのコードを記述します。</p>

<pre><code class="html app/views/layouts/application.html.erb">  &lt;div class="container theme-showcase" role="main"&gt;
    &lt;!-- Main jumbotron --&gt;
    &lt;div class="jumbotron"&gt;
      &lt;h1&gt;Hello, world!&lt;/h1&gt;
      &lt;p class="text-warning"&gt;bootstrap3-sample&lt;/p&gt;
    &lt;/div&gt;&lt;!-- /.jumbotron --&gt;

    &lt;%= yield %&gt;

  &lt;/div&gt;&lt;!-- /.container --&gt;
</code></pre>

<h2 class="text-warning">Railsのフラッシュメッセージ表示</h2>


<p><img src="/images/install-bootstrap3-on-rails4_03.jpg" alt="" /></p>

<p>後述する<code>app/views/entries/show.html.erb</code>に<code>&lt;%= notice %&gt;</code>というフラッシュメッセージを表示するコードがscaffoldによって自動生成されているのですが、Bootstrap3の<code>Alertsコンポーネント</code>を使って見栄えを良くすると同時に、先述したJumbotron(ジャンボトロン)の上部に表示するために<code>app/views/layouts/application.html.erb</code>に移動しlます。</p>

<pre><code class="erb app/views/layouts/application.html.erb">  &lt;% if (notice) %&gt;
    &lt;div class="alert alert-info alert-dismissible" role="alert"&gt;
      &lt;button type="button" class="close" data-dismiss="alert"&gt;
        &lt;span aria-hidden="true"&gt;&amp;times;&lt;/span&gt;
        &lt;span class="sr-only"&gt;閉じる&lt;/span&gt;
      &lt;/button&gt;
      &lt;strong&gt;&lt;%= notice %&gt;&lt;/strong&gt;
    &lt;/div&gt;
  &lt;% end %&gt;
</code></pre>

<h2 class="text-warning">entriesリソースのビューファイルを修正</h2>


<p>scaffoldで生成したビューファイルに色々とBootstrap3のスタイルを適用していきます。</p>

<h3 class="text-success">app/views/entries/index.html.erb</h3>


<p><img src="/images/install-bootstrap3-on-rails4_04.jpg" alt="" /></p>

<p>&#8220;`html app/views/entries/index.html.erb</p>

<h1>Listing entries</h1>


<p><button type="button" class="btn btn-lg btn-default">
  &lt;%= link_to &lsquo;New Entry&rsquo;, new_entry_path %>
</button>
<br></p>

<div class="col-md-6">
  <table class="table table-striped">
    <thead>
      <tr>
        <th>Name</th>
        <th>Descriptiion</th>
        <th colspan="3"></th>
      </tr>
    </thead>
    <tbody>
      <% @entries.each do |entry| %>
        <tr>
          <td><%= entry.name %></td>
          <td><%= entry.description %></td>
          <td><%= link_to 'Show', entry %></td>
          <td><%= link_to 'Edit', edit_entry_path(entry) %></td>
          <td><%= link_to 'Destroy', entry, method: :delete, data: { confirm: 'Are you sure?' } %></td>
        </tr>
      <% end %>
    </tbody>
  </table>
</div>


<p>&#8220;`</p>

<h3 class="text-success">app/views/entries/show.html.erb</h3>


<p><img src="/images/install-bootstrap3-on-rails4_05.jpg" alt="" /></p>

<p>&#8220;`html app/views/entries/show.html.erb</p>

<div class="col-md-6">
  <table class="table table-striped">
    <thead>
      <tr>
        <th>Name</th>
        <th>Descriptiion</th>
        <th></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><%= @entry.name %></td>
        <td><%= @entry.description %></td>
        <td><%= link_to 'Edit', edit_entry_path(@entry) %></td>
      </tr>
    </tbody>
  </table>

  <button type="button" class="btn pull-right btn-lg btn-default">
    <%= link_to 'Back', entries_path %>
  </button>

</div>


<p>&#8220;`</p>

<h3 class="text-success">app/views/entries/new.html.erb</h3>


<p><img src="/images/install-bootstrap3-on-rails4_06.jpg" alt="" /></p>

<p>&#8220;`html app/views/entries/new.html.erb</p>

<h1>New entry</h1>




<div class="col-md-6">
  <%= render 'form' %>

  <button type="button" class="btn pull-right btn-lg btn-default">
    <%= link_to 'Back', entries_path %>
  </button>

</div>


<p>&#8220;`</p>

<h3 class="text-success">app/views/entries/edit.html.erb</h3>


<p><img src="/images/install-bootstrap3-on-rails4_07.jpg" alt="" /></p>

<p>&#8220;`html app/views/entries/edit.html.erb</p>

<h1>Editing entry</h1>




<div class="col-md-6">
  <%= render 'form' %>

  <button type="button" class="btn pull-right btn-lg btn-default">
    <%= link_to 'Back', entries_path %>
  </button>

</div>


<p>&#8220;`</p>

<h3 class="text-success">app/views/entries/_form.html.erb</h3>


<pre><code class="html app/views/entries/_form.html.erb">&lt;%= form_for( (@entry), {:role =&gt; "form"} ) do |f| %&gt;
  &lt;% if @entry.errors.any? %&gt;
    &lt;div id="error_explanation"&gt;
      &lt;h2&gt;&lt;%= pluralize(@entry.errors.count, "error") %&gt; prohibited this entry from being saved:&lt;/h2&gt;

      &lt;ul&gt;
      &lt;% @entry.errors.full_messages.each do |message| %&gt;
        &lt;li&gt;&lt;%= message %&gt;&lt;/li&gt;
      &lt;% end %&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;% end %&gt;

  &lt;table class="table table-striped"&gt;
    &lt;thead&gt;
      &lt;tr&gt;
        &lt;th&gt;&lt;%= f.label :name %&gt;&lt;/th&gt;
        &lt;th&gt;&lt;%= f.label :description %&gt;&lt;/th&gt;
      &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
      &lt;tr&gt;
        &lt;td&gt;&lt;%= f.text_field :name %&gt;&lt;/td&gt;
        &lt;td&gt;&lt;%= f.text_field :description %&gt;&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/tbody&gt;
  &lt;/table&gt;

  &lt;%= f.submit :class =&gt; "btn btn-default" %&gt;

&lt;% end %&gt;
</code></pre>

<h1>herokuにpushしてみる</h1>

<p><a href="https://devcenter.heroku.com/articles/getting-started-with-rails4">https://devcenter.heroku.com/articles/getting-started-with-rails4</a></p>

<h2 class="text-warning">Herokuを使う準備</h2>




<h3 class="text-success">production環境でのアセットコンパイルを有効にする</h3>


<p><code>config/environments/production.rb</code>を修正して<code>production環境でのassets</code>を有効にします。</p>

<p>以下の設定パラメータを設定します。</p>

<pre><code class="ruby config/environments/production.rb">config.cache_classes = true
config.serve_static_assets = true
config.assets.compile = true
config.assets.digest = true
</code></pre>

<p>修正後の<code>config/environments/production.rb</code>のdiff情報です。</p>

<pre><code class="diff config/environments/production.rb">--- a/config/environments/production.rb
+++ b/config/environments/production.rb
@@ -20,14 +20,14 @@ Rails.application.configure do
   # config.action_dispatch.rack_cache = true

   # Disable Rails's static asset server (Apache or nginx will already do this).
-  config.serve_static_assets = false
+  config.serve_static_assets = true

   # Compress JavaScripts and CSS.
   config.assets.js_compressor = :uglifier
   # config.assets.css_compressor = :sass

   # Do not fallback to assets pipeline if a precompiled asset is missed.
-  config.assets.compile = false
+  config.assets.compile = true

   # Generate digests for assets URLs.
   config.assets.digest = true
</code></pre>

<h3 class="text-success">gitレポジトリを作成</h3>


<p>herokuに対するアプリケーションのデプロイ方法は<code>git push</code>を行うことなので、ローカル環境でgitレポジトリを作成します。</p>

<pre><code class="sh">cd /path/to/app
git init .
git add ./
git commit -m "initial commit"
</code></pre>

<h3 class="text-success">herokuにアカウントを登録</h3>


<p><a href="https://id.heroku.com/signup/devcenter">こちらからherokuにアカウントを登録する</a></p>

<h3 class="text-success">heroku toolbelt インストール</h3>


<p><a href="https://toolbelt.heroku.com/">heroku toolbelt</a>とは、<strong>heroku appsの作成や管理を行うためのHerokuクライアントで、実体は<code>herokuコマンドファイル</code></strong>です。</p>

<p><code>herokuコマンド</code>をインストールする方法は、OSプラットフォームにより3パターンあります。</p>

<ol>
<li><a href="https://toolbelt.heroku.com/osx">Mac OSX</a>、または<a href="https://toolbelt.heroku.com/windows">Windows</a>ではパッケージが提供されていますのでパッケージをダウンロードしてインストールします。</li>
<li><a href="https://toolbelt.heroku.com/debian">Debian/Ubuntu</a>にもdeb形式のパッケージが公開されていますが、こちらは直接ダウンロードするのではなく<a href="https://toolbelt.heroku.com/install-ubuntu.sh">インストールスクリプト</a>を利用します。</li>
<li><a href="https://toolbelt.heroku.com/standalone">Debian/Ubuntu以外のUnix/Linux</a>ではxzファイルフォーマットで圧縮されたtarボールで配布されています。こちらも<a href="https://toolbelt.heroku.com/install.sh">インストールスクリプト</a>を利用します。</li>
</ol>


<p><br>
今回は<code>CentOS6</code>なので3番目の<a href="https://toolbelt.heroku.com/install.sh">インストールスクリプト</a>を利用します。<a href="https://toolbelt.heroku.com/standalone">https://toolbelt.heroku.com/standalone</a>の内容に沿ってインストールします。</p>

<p>注意点としては、<a href="https://toolbelt.heroku.com/install.sh">インストールスクリプト</a>の実行は<code>sudo</code>権限を持つユーザである必要があります(中でsudoを実行しているため)。</p>

<pre><code class="sh">wget -qO- https://toolbelt.heroku.com/install.sh | sh
</code></pre>

<p>これで<code>/usr/local/heroku/bin</code>以下に<code>herokuコマンド</code>がインストールされるので、<code>$PATH</code>環境変数に<code>/usr/local/heroku/bin</code>へのパスを設定しておきます。</p>

<pre><code class="sh">echo 'export PATH=${PATH}:/usr/local/heroku/bin' &gt;&gt; ~/.bashrc
</code></pre>

<h3 class="text-success">heroku toolbelt を使ってherokuへログイン</h3>


<p><code>heroku</code>コマンドラインツールを使ってログインします。先ほど作成した<code>herokuアカウント</code>のメールアドレスとパスワードを入力し、<code>Authentication successful.</code>と表示されればログイン成功です。また、該当Unixユーザでのログインが初めての場合は公開鍵認証に関する設定を行う場合があります。</p>

<pre><code class="sh">heroku login
</code></pre>

<h3 class="text-success">heroku appsを作成</h3>


<p>今回は<code>buf-material-bootstrap3-sample</code>という名前のアプリケーションをheroku上に作成します。</p>

<pre><code class="sh">heroku apps:create buf-material-bootstrap3-sample
</code></pre>

<p>コマンドの結果が以下のように表示されます。</p>

<p>URLが<a href="http://buf-material-bootstrap3-sample.herokuapp.com/">http://buf-material-bootstrap3-sample.herokuapp.com/</a>で、heroku上に作成されるgitレポジトリのURLがgit@heroku.com:buf-material-bootstrap3-sample.git となりました。</p>

<pre><code class="text heroku apps:create buf-material-bootstrap3-sample コマンド結果">Creating buf-material-bootstrap3-sample... done, stack is cedar
http://buf-material-bootstrap3-sample.herokuapp.com/ | git@heroku.com:buf-material-bootstrap3-sample.git
Git remote heroku added
</code></pre>

<h3 class="text-success">heroku appsにアプリケーションをデプロイ & DBマイグレーション</h3>


<p>herokuへのアプリケーションデプロイはなんと<code>git push heroku master</code>1発なのです!</p>

<p>DBマイグレーションをお忘れなく。</p>

<pre><code class="sh">git push heroku master
heroku run rake db:migrate
</code></pre>

<p>これで <a href="http://buf-material-bootstrap3-sample.herokuapp.com/" target="_blank"><a href="http://buf-material-bootstrap3-sample.herokuapp.com/">http://buf-material-bootstrap3-sample.herokuapp.com/</a></a> にアクセスすると先ほどローカル環境で見ていたアプリケーション画面が表示されました。
<br></p>

<p><a href="http://buf-material-bootstrap3-sample.herokuapp.com/" target="_blank">サンプルアプリケーション</a>
<br></p>

<p><a href="http://buf-material-bootstrap3-sample.herokuapp.com/" target="_blank">
  <img src="http://yoursite.com/images/install-bootstrap3-on-rails4_08.jpg">
</a>
<br>
<br></p>
]]></content>
  </entry>
  
</feed>
